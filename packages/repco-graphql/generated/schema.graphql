type Agent {
  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """Reads and enables pagination through a set of `Commit`."""
  commitsByCommitAgentDidAndParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AgentCommitsByCommitAgentDidAndParentManyToManyConnection!
  did: String!

  """Reads and enables pagination through a set of `Repo`."""
  reposByCommitAgentDidAndRepoDid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RepoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RepoFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Repo`."""
    orderBy: [ReposOrderBy!] = [PRIMARY_KEY_ASC]
  ): AgentReposByCommitAgentDidAndRepoDidManyToManyConnection!

  """Reads and enables pagination through a set of `Revision`."""
  revisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection!
  type: AgentType

  """Reads a single `User` that is related to this `Agent`."""
  userByDid: User

  """Reads and enables pagination through a set of `User`."""
  usersBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection! @deprecated(reason: "Please use userByDid instead")
}

"""A connection to a list of `Commit` values, with data from `Commit`."""
type AgentCommitsByCommitAgentDidAndParentManyToManyConnection {
  """
  A list of edges which contains the `Commit`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [AgentCommitsByCommitAgentDidAndParentManyToManyEdge!]!

  """A list of `Commit` objects."""
  nodes: [Commit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Commit` you could get from the connection."""
  totalCount: Int!
}

"""A `Commit` edge in the connection, with data from `Commit`."""
type AgentCommitsByCommitAgentDidAndParentManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commitsByParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Commit` at the end of the edge."""
  node: Commit!
}

"""
A condition to be used against `Agent` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AgentCondition {
  """Checks for equality with the object’s `did` field."""
  did: String

  """Checks for equality with the object’s `type` field."""
  type: AgentType
}

"""
A filter to be used against `Agent` object types. All fields are combined with a logical ‘and.’
"""
input AgentFilter {
  """Checks for all expressions in this list."""
  and: [AgentFilter!]

  """Filter by the object’s `commits` relation."""
  commits: AgentToManyCommitFilter

  """Some related `commits` exist."""
  commitsExist: Boolean

  """Filter by the object’s `did` field."""
  did: StringFilter

  """Negates the expression."""
  not: AgentFilter

  """Checks for any expressions in this list."""
  or: [AgentFilter!]

  """Filter by the object’s `revisions` relation."""
  revisions: AgentToManyRevisionFilter

  """Some related `revisions` exist."""
  revisionsExist: Boolean

  """Filter by the object’s `type` field."""
  type: AgentTypeFilter

  """Filter by the object’s `userByDid` relation."""
  userByDid: UserFilter

  """A related `userByDid` exists."""
  userByDidExists: Boolean
}

"""A connection to a list of `Repo` values, with data from `Commit`."""
type AgentReposByCommitAgentDidAndRepoDidManyToManyConnection {
  """
  A list of edges which contains the `Repo`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [AgentReposByCommitAgentDidAndRepoDidManyToManyEdge!]!

  """A list of `Repo` objects."""
  nodes: [Repo!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Repo` you could get from the connection."""
  totalCount: Int!
}

"""A `Repo` edge in the connection, with data from `Commit`."""
type AgentReposByCommitAgentDidAndRepoDidManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Repo` at the end of the edge."""
  node: Repo!
}

"""
A filter to be used against many `Commit` object types. All fields are combined with a logical ‘and.’
"""
input AgentToManyCommitFilter {
  """
  Every related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommitFilter

  """
  No related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommitFilter

  """
  Some related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommitFilter
}

"""
A filter to be used against many `Revision` object types. All fields are combined with a logical ‘and.’
"""
input AgentToManyRevisionFilter {
  """
  Every related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RevisionFilter

  """
  No related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RevisionFilter

  """
  Some related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RevisionFilter
}

enum AgentType {
  DATASOURCE
  USER
}

"""
A filter to be used against AgentType fields. All fields are combined with a logical ‘and.’
"""
input AgentTypeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: AgentType

  """Equal to the specified value."""
  equalTo: AgentType

  """Greater than the specified value."""
  greaterThan: AgentType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: AgentType

  """Included in the specified list."""
  in: [AgentType!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: AgentType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: AgentType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: AgentType

  """Not equal to the specified value."""
  notEqualTo: AgentType

  """Not included in the specified list."""
  notIn: [AgentType!]
}

"""A connection to a list of `Agent` values."""
type AgentsConnection {
  """
  A list of edges which contains the `Agent` and cursor to aid in pagination.
  """
  edges: [AgentsEdge!]!

  """A list of `Agent` objects."""
  nodes: [Agent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Agent` you could get from the connection."""
  totalCount: Int!
}

"""A `Agent` edge in the connection."""
type AgentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Agent` at the end of the edge."""
  node: Agent!
}

"""Methods to use when ordering `Agent`."""
enum AgentsOrderBy {
  DID_ASC
  DID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
}

type Block {
  bytes: String!
  cid: String!
}

"""
A condition to be used against `Block` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BlockCondition {
  """Checks for equality with the object’s `bytes` field."""
  bytes: String

  """Checks for equality with the object’s `cid` field."""
  cid: String
}

"""
A filter to be used against `Block` object types. All fields are combined with a logical ‘and.’
"""
input BlockFilter {
  """Checks for all expressions in this list."""
  and: [BlockFilter!]

  """Filter by the object’s `cid` field."""
  cid: StringFilter

  """Negates the expression."""
  not: BlockFilter

  """Checks for any expressions in this list."""
  or: [BlockFilter!]
}

"""A connection to a list of `Block` values."""
type BlocksConnection {
  """
  A list of edges which contains the `Block` and cursor to aid in pagination.
  """
  edges: [BlocksEdge!]!

  """A list of `Block` objects."""
  nodes: [Block!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Block` you could get from the connection."""
  totalCount: Int!
}

"""A `Block` edge in the connection."""
type BlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Block` at the end of the edge."""
  node: Block!
}

"""Methods to use when ordering `Block`."""
enum BlocksOrderBy {
  BYTES_ASC
  BYTES_DESC
  CID_ASC
  CID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

type BroadcastEvent {
  """
  Reads a single `PublicationService` that is related to this `BroadcastEvent`.
  """
  broadcastService: PublicationService
  broadcastServiceUid: String!

  """Reads a single `ContentItem` that is related to this `BroadcastEvent`."""
  contentItem: ContentItem
  contentItemUid: String!
  duration: Float!

  """Reads a single `Revision` that is related to this `BroadcastEvent`."""
  revision: Revision
  revisionId: String!
  start: Float!
  uid: String!
}

"""
A condition to be used against `BroadcastEvent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BroadcastEventCondition {
  """Checks for equality with the object’s `broadcastServiceUid` field."""
  broadcastServiceUid: String

  """Checks for equality with the object’s `contentItemUid` field."""
  contentItemUid: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `start` field."""
  start: Float

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `BroadcastEvent` object types. All fields are combined with a logical ‘and.’
"""
input BroadcastEventFilter {
  """Checks for all expressions in this list."""
  and: [BroadcastEventFilter!]

  """Filter by the object’s `broadcastService` relation."""
  broadcastService: PublicationServiceFilter

  """Filter by the object’s `broadcastServiceUid` field."""
  broadcastServiceUid: StringFilter

  """Filter by the object’s `contentItem` relation."""
  contentItem: ContentItemFilter

  """Filter by the object’s `contentItemUid` field."""
  contentItemUid: StringFilter

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Negates the expression."""
  not: BroadcastEventFilter

  """Checks for any expressions in this list."""
  or: [BroadcastEventFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `start` field."""
  start: FloatFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `BroadcastEvent` values."""
type BroadcastEventsConnection {
  """
  A list of edges which contains the `BroadcastEvent` and cursor to aid in pagination.
  """
  edges: [BroadcastEventsEdge!]!

  """A list of `BroadcastEvent` objects."""
  nodes: [BroadcastEvent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BroadcastEvent` you could get from the connection."""
  totalCount: Int!
}

"""A `BroadcastEvent` edge in the connection."""
type BroadcastEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BroadcastEvent` at the end of the edge."""
  node: BroadcastEvent!
}

"""Methods to use when ordering `BroadcastEvent`."""
enum BroadcastEventsOrderBy {
  BROADCAST_SERVICE_UID_ASC
  BROADCAST_SERVICE_UID_DESC
  CONTENT_ITEM_UID_ASC
  CONTENT_ITEM_UID_DESC
  DURATION_ASC
  DURATION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  START_ASC
  START_DESC
  UID_ASC
  UID_DESC
}

type Chapter {
  duration: Float!

  """Reads a single `MediaAsset` that is related to this `Chapter`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!

  """Reads a single `Revision` that is related to this `Chapter`."""
  revision: Revision
  revisionId: String!
  start: Float!
  title: String!
  type: String!
  uid: String!
}

"""
A condition to be used against `Chapter` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChapterCondition {
  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `start` field."""
  start: Float

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Chapter` object types. All fields are combined with a logical ‘and.’
"""
input ChapterFilter {
  """Checks for all expressions in this list."""
  and: [ChapterFilter!]

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `mediaAsset` relation."""
  mediaAsset: MediaAssetFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: ChapterFilter

  """Checks for any expressions in this list."""
  or: [ChapterFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `start` field."""
  start: FloatFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Chapter` values."""
type ChaptersConnection {
  """
  A list of edges which contains the `Chapter` and cursor to aid in pagination.
  """
  edges: [ChaptersEdge!]!

  """A list of `Chapter` objects."""
  nodes: [Chapter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Chapter` you could get from the connection."""
  totalCount: Int!
}

"""A `Chapter` edge in the connection."""
type ChaptersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Chapter` at the end of the edge."""
  node: Chapter!
}

"""Methods to use when ordering `Chapter`."""
enum ChaptersOrderBy {
  DURATION_ASC
  DURATION_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  START_ASC
  START_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UID_ASC
  UID_DESC
}

type Commit {
  """Reads a single `Agent` that is related to this `Commit`."""
  agent: Agent
  agentDid: String!

  """Reads and enables pagination through a set of `Agent`."""
  agentsByCommitParentAndAgentDid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AgentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AgentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Agent`."""
    orderBy: [AgentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitAgentsByCommitParentAndAgentDidManyToManyConnection!

  """Reads a single `Commit` that is related to this `Commit`."""
  commitByParent: Commit
  commitCid: String!

  """Reads and enables pagination through a set of `Commit`."""
  commitsByParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!
  parent: String

  """Reads a single `Repo` that is related to this `Commit`."""
  repo: Repo
  repoDid: String!

  """Reads and enables pagination through a set of `Repo`."""
  reposByCommitParentAndRepoDid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RepoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RepoFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Repo`."""
    orderBy: [ReposOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitReposByCommitParentAndRepoDidManyToManyConnection!

  """Reads and enables pagination through a set of `Repo`."""
  reposByHead(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RepoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RepoFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Repo`."""
    orderBy: [ReposOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReposConnection!
  rootCid: String!
  timestamp: Datetime!
}

"""A connection to a list of `Agent` values, with data from `Commit`."""
type CommitAgentsByCommitParentAndAgentDidManyToManyConnection {
  """
  A list of edges which contains the `Agent`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [CommitAgentsByCommitParentAndAgentDidManyToManyEdge!]!

  """A list of `Agent` objects."""
  nodes: [Agent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Agent` you could get from the connection."""
  totalCount: Int!
}

"""A `Agent` edge in the connection, with data from `Commit`."""
type CommitAgentsByCommitParentAndAgentDidManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Agent` at the end of the edge."""
  node: Agent!
}

"""
A condition to be used against `Commit` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CommitCondition {
  """Checks for equality with the object’s `agentDid` field."""
  agentDid: String

  """Checks for equality with the object’s `commitCid` field."""
  commitCid: String

  """Checks for equality with the object’s `parent` field."""
  parent: String

  """Checks for equality with the object’s `repoDid` field."""
  repoDid: String

  """Checks for equality with the object’s `rootCid` field."""
  rootCid: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""
A filter to be used against `Commit` object types. All fields are combined with a logical ‘and.’
"""
input CommitFilter {
  """Filter by the object’s `agent` relation."""
  agent: AgentFilter

  """Filter by the object’s `agentDid` field."""
  agentDid: StringFilter

  """Checks for all expressions in this list."""
  and: [CommitFilter!]

  """Filter by the object’s `commitByParent` relation."""
  commitByParent: CommitFilter

  """A related `commitByParent` exists."""
  commitByParentExists: Boolean

  """Filter by the object’s `commitCid` field."""
  commitCid: StringFilter

  """Filter by the object’s `commitsByParent` relation."""
  commitsByParent: CommitToManyCommitFilter

  """Some related `commitsByParent` exist."""
  commitsByParentExist: Boolean

  """Negates the expression."""
  not: CommitFilter

  """Checks for any expressions in this list."""
  or: [CommitFilter!]

  """Filter by the object’s `parent` field."""
  parent: StringFilter

  """Filter by the object’s `repo` relation."""
  repo: RepoFilter

  """Filter by the object’s `repoDid` field."""
  repoDid: StringFilter

  """Filter by the object’s `reposByHead` relation."""
  reposByHead: CommitToManyRepoFilter

  """Some related `reposByHead` exist."""
  reposByHeadExist: Boolean

  """Filter by the object’s `rootCid` field."""
  rootCid: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter
}

"""A connection to a list of `Repo` values, with data from `Commit`."""
type CommitReposByCommitParentAndRepoDidManyToManyConnection {
  """
  A list of edges which contains the `Repo`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [CommitReposByCommitParentAndRepoDidManyToManyEdge!]!

  """A list of `Repo` objects."""
  nodes: [Repo!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Repo` you could get from the connection."""
  totalCount: Int!
}

"""A `Repo` edge in the connection, with data from `Commit`."""
type CommitReposByCommitParentAndRepoDidManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Repo` at the end of the edge."""
  node: Repo!
}

"""
A filter to be used against many `Commit` object types. All fields are combined with a logical ‘and.’
"""
input CommitToManyCommitFilter {
  """
  Every related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommitFilter

  """
  No related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommitFilter

  """
  Some related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommitFilter
}

"""
A filter to be used against many `Repo` object types. All fields are combined with a logical ‘and.’
"""
input CommitToManyRepoFilter {
  """
  Every related `Repo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RepoFilter

  """
  No related `Repo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RepoFilter

  """
  Some related `Repo` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RepoFilter
}

"""A connection to a list of `Commit` values."""
type CommitsConnection {
  """
  A list of edges which contains the `Commit` and cursor to aid in pagination.
  """
  edges: [CommitsEdge!]!

  """A list of `Commit` objects."""
  nodes: [Commit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Commit` you could get from the connection."""
  totalCount: Int!
}

"""A `Commit` edge in the connection."""
type CommitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Commit` at the end of the edge."""
  node: Commit!
}

"""Methods to use when ordering `Commit`."""
enum CommitsOrderBy {
  AGENT_DID_ASC
  AGENT_DID_DESC
  COMMIT_CID_ASC
  COMMIT_CID_DESC
  NATURAL
  PARENT_ASC
  PARENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPO_DID_ASC
  REPO_DID_DESC
  ROOT_CID_ASC
  ROOT_CID_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
}

type Concept {
  """Reads and enables pagination through a set of `Concept`."""
  childConcepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """Reads and enables pagination through a set of `Concept`."""
  conceptsByConceptParentUidAndSameAsUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptConceptsByConceptParentUidAndSameAsUidManyToManyConnection!

  """Reads and enables pagination through a set of `Concept`."""
  conceptsByConceptSameAsUidAndParentUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptConceptsByConceptSameAsUidAndParentUidManyToManyConnection!

  """Reads and enables pagination through a set of `Concept`."""
  conceptsBySameAs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptContentItemsByConceptToContentItemAAndBManyToManyConnection!
  description: String
  kind: ConceptKind!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyConnection!
  name: String!
  originNamespace: String

  """Reads a single `Concept` that is related to this `Concept`."""
  parent: Concept
  parentUid: String

  """Reads a single `Revision` that is related to this `Concept`."""
  revision: Revision
  revisionId: String!

  """Reads a single `Concept` that is related to this `Concept`."""
  sameAs: Concept
  sameAsUid: String
  summary: String
  uid: String!
  wikidataIdentifier: String
}

"""A connection to a list of `Concept` values, with data from `Concept`."""
type ConceptConceptsByConceptParentUidAndSameAsUidManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `Concept`, and the cursor to aid in pagination.
  """
  edges: [ConceptConceptsByConceptParentUidAndSameAsUidManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection, with data from `Concept`."""
type ConceptConceptsByConceptParentUidAndSameAsUidManyToManyEdge {
  """Reads and enables pagination through a set of `Concept`."""
  conceptsBySameAs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""A connection to a list of `Concept` values, with data from `Concept`."""
type ConceptConceptsByConceptSameAsUidAndParentUidManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `Concept`, and the cursor to aid in pagination.
  """
  edges: [ConceptConceptsByConceptSameAsUidAndParentUidManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection, with data from `Concept`."""
type ConceptConceptsByConceptSameAsUidAndParentUidManyToManyEdge {
  """Reads and enables pagination through a set of `Concept`."""
  childConcepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `Concept` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ConceptCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `kind` field."""
  kind: ConceptKind

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `originNamespace` field."""
  originNamespace: String

  """Checks for equality with the object’s `parentUid` field."""
  parentUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `sameAsUid` field."""
  sameAsUid: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `wikidataIdentifier` field."""
  wikidataIdentifier: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ConceptToContentItem`.
"""
type ConceptContentItemsByConceptToContentItemAAndBManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ConceptToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ConceptContentItemsByConceptToContentItemAAndBManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ConceptToContentItem`.
"""
type ConceptContentItemsByConceptToContentItemAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToContentItem`."""
  _conceptToContentItemsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToContentItem`."""
    orderBy: [_ConceptToContentItemsOrderBy!] = [NATURAL]
  ): _ConceptToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `Concept` object types. All fields are combined with a logical ‘and.’
"""
input ConceptFilter {
  """Checks for all expressions in this list."""
  and: [ConceptFilter!]

  """Filter by the object’s `childConcepts` relation."""
  childConcepts: ConceptToManyConceptFilter

  """Some related `childConcepts` exist."""
  childConceptsExist: Boolean

  """Filter by the object’s `conceptsBySameAs` relation."""
  conceptsBySameAs: ConceptToManyConceptFilter

  """Some related `conceptsBySameAs` exist."""
  conceptsBySameAsExist: Boolean

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `kind` field."""
  kind: ConceptKindFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ConceptFilter

  """Checks for any expressions in this list."""
  or: [ConceptFilter!]

  """Filter by the object’s `originNamespace` field."""
  originNamespace: StringFilter

  """Filter by the object’s `parent` relation."""
  parent: ConceptFilter

  """A related `parent` exists."""
  parentExists: Boolean

  """Filter by the object’s `parentUid` field."""
  parentUid: StringFilter

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `sameAs` relation."""
  sameAs: ConceptFilter

  """A related `sameAs` exists."""
  sameAsExists: Boolean

  """Filter by the object’s `sameAsUid` field."""
  sameAsUid: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `wikidataIdentifier` field."""
  wikidataIdentifier: StringFilter
}

enum ConceptKind {
  CATEGORY
  TAG
}

"""
A filter to be used against ConceptKind fields. All fields are combined with a logical ‘and.’
"""
input ConceptKindFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ConceptKind

  """Equal to the specified value."""
  equalTo: ConceptKind

  """Greater than the specified value."""
  greaterThan: ConceptKind

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ConceptKind

  """Included in the specified list."""
  in: [ConceptKind!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: ConceptKind

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ConceptKind

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ConceptKind

  """Not equal to the specified value."""
  notEqualTo: ConceptKind

  """Not included in the specified list."""
  notIn: [ConceptKind!]
}

"""
A connection to a list of `MediaAsset` values, with data from `_ConceptToMediaAsset`.
"""
type ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ConceptToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ConceptToMediaAsset`.
"""
type ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToMediaAsset`."""
  _conceptToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToMediaAsset`."""
    orderBy: [_ConceptToMediaAssetsOrderBy!] = [NATURAL]
  ): _ConceptToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""
A filter to be used against many `Concept` object types. All fields are combined with a logical ‘and.’
"""
input ConceptToManyConceptFilter {
  """
  Every related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConceptFilter

  """
  No related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConceptFilter

  """
  Some related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConceptFilter
}

"""A connection to a list of `Concept` values."""
type ConceptsConnection {
  """
  A list of edges which contains the `Concept` and cursor to aid in pagination.
  """
  edges: [ConceptsEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection."""
type ConceptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""Methods to use when ordering `Concept`."""
enum ConceptsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  KIND_ASC
  KIND_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORIGIN_NAMESPACE_ASC
  ORIGIN_NAMESPACE_DESC
  PARENT_UID_ASC
  PARENT_UID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  SAME_AS_UID_ASC
  SAME_AS_UID_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  UID_ASC
  UID_DESC
  WIKIDATA_IDENTIFIER_ASC
  WIKIDATA_IDENTIFIER_DESC
}

type ContentGrouping {
  broadcastSchedule: String

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!
  description: String
  groupingType: String!

  """Reads a single `License` that is related to this `ContentGrouping`."""
  license: License
  licenseUid: String

  """Reads and enables pagination through a set of `License`."""
  licensesByContentItemPrimaryGroupingUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByContentItemPrimaryGroupingUidAndPublicationServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingPublicationServicesByContentItemPrimaryGroupingUidAndPublicationServiceUidManyToManyConnection!

  """Reads a single `Revision` that is related to this `ContentGrouping`."""
  revision: Revision
  revisionId: String!
  startingDate: Datetime
  subtitle: String
  summary: String
  terminationDate: Datetime
  title: String!
  uid: String!
  variant: ContentGroupingVariant!
}

"""
A condition to be used against `ContentGrouping` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContentGroupingCondition {
  """Checks for equality with the object’s `broadcastSchedule` field."""
  broadcastSchedule: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `groupingType` field."""
  groupingType: String

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `startingDate` field."""
  startingDate: Datetime

  """Checks for equality with the object’s `subtitle` field."""
  subtitle: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `terminationDate` field."""
  terminationDate: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `variant` field."""
  variant: ContentGroupingVariant
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentGroupingToContentItem`.
"""
type ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentGroupingToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentGroupingToContentItem`.
"""
type ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentGroupingToContentItem`.
  """
  _contentGroupingToContentItemsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentGroupingToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentGroupingToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentGroupingToContentItem`."""
    orderBy: [_ContentGroupingToContentItemsOrderBy!] = [NATURAL]
  ): _ContentGroupingToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `ContentGrouping` object types. All fields are combined with a logical ‘and.’
"""
input ContentGroupingFilter {
  """Checks for all expressions in this list."""
  and: [ContentGroupingFilter!]

  """Filter by the object’s `broadcastSchedule` field."""
  broadcastSchedule: StringFilter

  """Filter by the object’s `contentItemsByPrimaryGrouping` relation."""
  contentItemsByPrimaryGrouping: ContentGroupingToManyContentItemFilter

  """Some related `contentItemsByPrimaryGrouping` exist."""
  contentItemsByPrimaryGroupingExist: Boolean

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `groupingType` field."""
  groupingType: StringFilter

  """Filter by the object’s `license` relation."""
  license: LicenseFilter

  """A related `license` exists."""
  licenseExists: Boolean

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Negates the expression."""
  not: ContentGroupingFilter

  """Checks for any expressions in this list."""
  or: [ContentGroupingFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `startingDate` field."""
  startingDate: DatetimeFilter

  """Filter by the object’s `subtitle` field."""
  subtitle: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `terminationDate` field."""
  terminationDate: DatetimeFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `variant` field."""
  variant: ContentGroupingVariantFilter
}

"""
A connection to a list of `License` values, with data from `ContentItem`.
"""
type ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentItem`."""
type ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `PublicationService` values, with data from `ContentItem`.
"""
type ContentGroupingPublicationServicesByContentItemPrimaryGroupingUidAndPublicationServiceUidManyToManyConnection {
  """
  A list of edges which contains the `PublicationService`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentGroupingPublicationServicesByContentItemPrimaryGroupingUidAndPublicationServiceUidManyToManyEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `PublicationService` edge in the connection, with data from `ContentItem`.
"""
type ContentGroupingPublicationServicesByContentItemPrimaryGroupingUidAndPublicationServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""
A filter to be used against many `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input ContentGroupingToManyContentItemFilter {
  """
  Every related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentItemFilter

  """
  No related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentItemFilter

  """
  Some related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentItemFilter
}

enum ContentGroupingVariant {
  EPISODIC
  SERIAL
}

"""
A filter to be used against ContentGroupingVariant fields. All fields are combined with a logical ‘and.’
"""
input ContentGroupingVariantFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ContentGroupingVariant

  """Equal to the specified value."""
  equalTo: ContentGroupingVariant

  """Greater than the specified value."""
  greaterThan: ContentGroupingVariant

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ContentGroupingVariant

  """Included in the specified list."""
  in: [ContentGroupingVariant!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: ContentGroupingVariant

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ContentGroupingVariant

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ContentGroupingVariant

  """Not equal to the specified value."""
  notEqualTo: ContentGroupingVariant

  """Not included in the specified list."""
  notIn: [ContentGroupingVariant!]
}

"""A connection to a list of `ContentGrouping` values."""
type ContentGroupingsConnection {
  """
  A list of edges which contains the `ContentGrouping` and cursor to aid in pagination.
  """
  edges: [ContentGroupingsEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ContentGrouping` edge in the connection."""
type ContentGroupingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""Methods to use when ordering `ContentGrouping`."""
enum ContentGroupingsOrderBy {
  BROADCAST_SCHEDULE_ASC
  BROADCAST_SCHEDULE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GROUPING_TYPE_ASC
  GROUPING_TYPE_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  STARTING_DATE_ASC
  STARTING_DATE_DESC
  SUBTITLE_ASC
  SUBTITLE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TERMINATION_DATE_ASC
  TERMINATION_DATE_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
  VARIANT_ASC
  VARIANT_DESC
}

type ContentItem {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemConceptsByConceptToContentItemBAndAManyToManyConnection!
  content: String!
  contentFormat: String!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemContributionsByContentItemToContributionAAndBManyToManyConnection!

  """Reads a single `License` that is related to this `ContentItem`."""
  license: License
  licenseUid: String

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyConnection!

  """
  Reads a single `ContentGrouping` that is related to this `ContentItem`.
  """
  primaryGrouping: ContentGrouping
  primaryGroupingUid: String
  pubDate: Datetime

  """
  Reads a single `PublicationService` that is related to this `ContentItem`.
  """
  publicationService: PublicationService
  publicationServiceUid: String

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByBroadcastEventContentItemUidAndBroadcastServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemPublicationServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyConnection!

  """Reads a single `Revision` that is related to this `ContentItem`."""
  revision: Revision
  revisionId: String!
  subtitle: String
  summary: String
  title: String!
  uid: String!
}

"""
A connection to a list of `Concept` values, with data from `_ConceptToContentItem`.
"""
type ContentItemConceptsByConceptToContentItemBAndAManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `_ConceptToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentItemConceptsByConceptToContentItemBAndAManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""
A `Concept` edge in the connection, with data from `_ConceptToContentItem`.
"""
type ContentItemConceptsByConceptToContentItemBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToContentItem`."""
  _conceptToContentItemsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToContentItem`."""
    orderBy: [_ConceptToContentItemsOrderBy!] = [NATURAL]
  ): _ConceptToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `ContentItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContentItemCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `contentFormat` field."""
  contentFormat: String

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `primaryGroupingUid` field."""
  primaryGroupingUid: String

  """Checks for equality with the object’s `pubDate` field."""
  pubDate: Datetime

  """Checks for equality with the object’s `publicationServiceUid` field."""
  publicationServiceUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `subtitle` field."""
  subtitle: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `_ContentGroupingToContentItem`.
"""
type ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `_ContentGroupingToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `_ContentGroupingToContentItem`.
"""
type ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentGroupingToContentItem`.
  """
  _contentGroupingToContentItemsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentGroupingToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentGroupingToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentGroupingToContentItem`."""
    orderBy: [_ContentGroupingToContentItemsOrderBy!] = [NATURAL]
  ): _ContentGroupingToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""
A connection to a list of `Contribution` values, with data from `_ContentItemToContribution`.
"""
type ContentItemContributionsByContentItemToContributionAAndBManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ContentItemToContribution`, and the cursor to aid in pagination.
  """
  edges: [ContentItemContributionsByContentItemToContributionAAndBManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ContentItemToContribution`.
"""
type ContentItemContributionsByContentItemToContributionAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToContribution`.
  """
  _contentItemToContributionsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToContribution`."""
    orderBy: [_ContentItemToContributionsOrderBy!] = [NATURAL]
  ): _ContentItemToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A filter to be used against `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input ContentItemFilter {
  """Checks for all expressions in this list."""
  and: [ContentItemFilter!]

  """Filter by the object’s `broadcastEvents` relation."""
  broadcastEvents: ContentItemToManyBroadcastEventFilter

  """Some related `broadcastEvents` exist."""
  broadcastEventsExist: Boolean

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `contentFormat` field."""
  contentFormat: StringFilter

  """Filter by the object’s `license` relation."""
  license: LicenseFilter

  """A related `license` exists."""
  licenseExists: Boolean

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Negates the expression."""
  not: ContentItemFilter

  """Checks for any expressions in this list."""
  or: [ContentItemFilter!]

  """Filter by the object’s `primaryGrouping` relation."""
  primaryGrouping: ContentGroupingFilter

  """A related `primaryGrouping` exists."""
  primaryGroupingExists: Boolean

  """Filter by the object’s `primaryGroupingUid` field."""
  primaryGroupingUid: StringFilter

  """Filter by the object’s `pubDate` field."""
  pubDate: DatetimeFilter

  """Filter by the object’s `publicationService` relation."""
  publicationService: PublicationServiceFilter

  """A related `publicationService` exists."""
  publicationServiceExists: Boolean

  """Filter by the object’s `publicationServiceUid` field."""
  publicationServiceUid: StringFilter

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `subtitle` field."""
  subtitle: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `MediaAsset` values, with data from `_ContentItemToMediaAsset`.
"""
type ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ContentItemToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ContentItemToMediaAsset`.
"""
type ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToMediaAsset`.
  """
  _contentItemToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToMediaAsset`."""
    orderBy: [_ContentItemToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContentItemToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""
A connection to a list of `PublicationService` values, with data from `BroadcastEvent`.
"""
type ContentItemPublicationServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyConnection {
  """
  A list of edges which contains the `PublicationService`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [ContentItemPublicationServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `PublicationService` edge in the connection, with data from `BroadcastEvent`.
"""
type ContentItemPublicationServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEventsByBroadcastService(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""
A filter to be used against many `BroadcastEvent` object types. All fields are combined with a logical ‘and.’
"""
input ContentItemToManyBroadcastEventFilter {
  """
  Every related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BroadcastEventFilter

  """
  No related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BroadcastEventFilter

  """
  Some related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BroadcastEventFilter
}

"""A connection to a list of `ContentItem` values."""
type ContentItemsConnection {
  """
  A list of edges which contains the `ContentItem` and cursor to aid in pagination.
  """
  edges: [ContentItemsEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""A `ContentItem` edge in the connection."""
type ContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""Methods to use when ordering `ContentItem`."""
enum ContentItemsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CONTENT_FORMAT_ASC
  CONTENT_FORMAT_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  NATURAL
  PRIMARY_GROUPING_UID_ASC
  PRIMARY_GROUPING_UID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLICATION_SERVICE_UID_ASC
  PUBLICATION_SERVICE_UID_DESC
  PUB_DATE_ASC
  PUB_DATE_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  SUBTITLE_ASC
  SUBTITLE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
}

type Contribution {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionContentItemsByContentItemToContributionBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Contributor`."""
  contributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionContributorsByContributionToContributorAAndBManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyConnection!

  """Reads a single `Revision` that is related to this `Contribution`."""
  revision: Revision
  revisionId: String!
  role: String!
  uid: String!
}

"""
A condition to be used against `Contribution` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContributionCondition {
  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentItemToContribution`.
"""
type ContributionContentItemsByContentItemToContributionBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentItemToContribution`, and the cursor to aid in pagination.
  """
  edges: [ContributionContentItemsByContentItemToContributionBAndAManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentItemToContribution`.
"""
type ContributionContentItemsByContentItemToContributionBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToContribution`.
  """
  _contentItemToContributionsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToContribution`."""
    orderBy: [_ContentItemToContributionsOrderBy!] = [NATURAL]
  ): _ContentItemToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A connection to a list of `Contributor` values, with data from `_ContributionToContributor`.
"""
type ContributionContributorsByContributionToContributorAAndBManyToManyConnection {
  """
  A list of edges which contains the `Contributor`, info from the `_ContributionToContributor`, and the cursor to aid in pagination.
  """
  edges: [ContributionContributorsByContributionToContributorAAndBManyToManyEdge!]!

  """A list of `Contributor` objects."""
  nodes: [Contributor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contributor` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contributor` edge in the connection, with data from `_ContributionToContributor`.
"""
type ContributionContributorsByContributionToContributorAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToContributor`.
  """
  _contributionToContributorsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToContributor`."""
    orderBy: [_ContributionToContributorsOrderBy!] = [NATURAL]
  ): _ContributionToContributorsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contributor` at the end of the edge."""
  node: Contributor!
}

"""
A filter to be used against `Contribution` object types. All fields are combined with a logical ‘and.’
"""
input ContributionFilter {
  """Checks for all expressions in this list."""
  and: [ContributionFilter!]

  """Negates the expression."""
  not: ContributionFilter

  """Checks for any expressions in this list."""
  or: [ContributionFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `role` field."""
  role: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `MediaAsset` values, with data from `_ContributionToMediaAsset`.
"""
type ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ContributionToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ContributionToMediaAsset`.
"""
type ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToMediaAsset`.
  """
  _contributionToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToMediaAsset`."""
    orderBy: [_ContributionToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContributionToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""A connection to a list of `Contribution` values."""
type ContributionsConnection {
  """
  A list of edges which contains the `Contribution` and cursor to aid in pagination.
  """
  edges: [ContributionsEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""A `Contribution` edge in the connection."""
type ContributionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""Methods to use when ordering `Contribution`."""
enum ContributionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  ROLE_ASC
  ROLE_DESC
  UID_ASC
  UID_DESC
}

type Contributor {
  contactInformation: String!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributorContributionsByContributionToContributorBAndAManyToManyConnection!
  name: String!
  personOrOrganization: String!

  """Reads a single `File` that is related to this `Contributor`."""
  profilePicture: File
  profilePictureUid: String!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByPublisher(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServicesConnection!

  """Reads a single `Revision` that is related to this `Contributor`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `Contributor` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContributorCondition {
  """Checks for equality with the object’s `contactInformation` field."""
  contactInformation: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `personOrOrganization` field."""
  personOrOrganization: String

  """Checks for equality with the object’s `profilePictureUid` field."""
  profilePictureUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `Contribution` values, with data from `_ContributionToContributor`.
"""
type ContributorContributionsByContributionToContributorBAndAManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ContributionToContributor`, and the cursor to aid in pagination.
  """
  edges: [ContributorContributionsByContributionToContributorBAndAManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ContributionToContributor`.
"""
type ContributorContributionsByContributionToContributorBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToContributor`.
  """
  _contributionToContributorsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToContributor`."""
    orderBy: [_ContributionToContributorsOrderBy!] = [NATURAL]
  ): _ContributionToContributorsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A filter to be used against `Contributor` object types. All fields are combined with a logical ‘and.’
"""
input ContributorFilter {
  """Checks for all expressions in this list."""
  and: [ContributorFilter!]

  """Filter by the object’s `contactInformation` field."""
  contactInformation: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ContributorFilter

  """Checks for any expressions in this list."""
  or: [ContributorFilter!]

  """Filter by the object’s `personOrOrganization` field."""
  personOrOrganization: StringFilter

  """Filter by the object’s `profilePicture` relation."""
  profilePicture: FileFilter

  """Filter by the object’s `profilePictureUid` field."""
  profilePictureUid: StringFilter

  """Filter by the object’s `publicationServicesByPublisher` relation."""
  publicationServicesByPublisher: ContributorToManyPublicationServiceFilter

  """Some related `publicationServicesByPublisher` exist."""
  publicationServicesByPublisherExist: Boolean

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A filter to be used against many `PublicationService` object types. All fields are combined with a logical ‘and.’
"""
input ContributorToManyPublicationServiceFilter {
  """
  Every related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PublicationServiceFilter

  """
  No related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PublicationServiceFilter

  """
  Some related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PublicationServiceFilter
}

"""A connection to a list of `Contributor` values."""
type ContributorsConnection {
  """
  A list of edges which contains the `Contributor` and cursor to aid in pagination.
  """
  edges: [ContributorsEdge!]!

  """A list of `Contributor` objects."""
  nodes: [Contributor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contributor` you could get from the connection."""
  totalCount: Int!
}

"""A `Contributor` edge in the connection."""
type ContributorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contributor` at the end of the edge."""
  node: Contributor!
}

"""Methods to use when ordering `Contributor`."""
enum ContributorsOrderBy {
  CONTACT_INFORMATION_ASC
  CONTACT_INFORMATION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PERSON_OR_ORGANIZATION_ASC
  PERSON_OR_ORGANIZATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_PICTURE_UID_ASC
  PROFILE_PICTURE_UID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

type DataSource {
  active: Boolean
  config: JSON
  cursor: String
  pluginUid: String!

  """Reads a single `Repo` that is related to this `DataSource`."""
  repo: Repo
  repoDid: String!

  """Reads and enables pagination through a set of `SourceRecord`."""
  sourceRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SourceRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SourceRecordFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SourceRecord`."""
    orderBy: [SourceRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SourceRecordsConnection!
  uid: String!
}

"""
A condition to be used against `DataSource` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DataSourceCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `config` field."""
  config: JSON

  """Checks for equality with the object’s `cursor` field."""
  cursor: String

  """Checks for equality with the object’s `pluginUid` field."""
  pluginUid: String

  """Checks for equality with the object’s `repoDid` field."""
  repoDid: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `DataSource` object types. All fields are combined with a logical ‘and.’
"""
input DataSourceFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [DataSourceFilter!]

  """Filter by the object’s `config` field."""
  config: JSONFilter

  """Filter by the object’s `cursor` field."""
  cursor: StringFilter

  """Negates the expression."""
  not: DataSourceFilter

  """Checks for any expressions in this list."""
  or: [DataSourceFilter!]

  """Filter by the object’s `pluginUid` field."""
  pluginUid: StringFilter

  """Filter by the object’s `repo` relation."""
  repo: RepoFilter

  """Filter by the object’s `repoDid` field."""
  repoDid: StringFilter

  """Filter by the object’s `sourceRecords` relation."""
  sourceRecords: DataSourceToManySourceRecordFilter

  """Some related `sourceRecords` exist."""
  sourceRecordsExist: Boolean

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A filter to be used against many `SourceRecord` object types. All fields are combined with a logical ‘and.’
"""
input DataSourceToManySourceRecordFilter {
  """
  Every related `SourceRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SourceRecordFilter

  """
  No related `SourceRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SourceRecordFilter

  """
  Some related `SourceRecord` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SourceRecordFilter
}

"""A connection to a list of `DataSource` values."""
type DataSourcesConnection {
  """
  A list of edges which contains the `DataSource` and cursor to aid in pagination.
  """
  edges: [DataSourcesEdge!]!

  """A list of `DataSource` objects."""
  nodes: [DataSource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DataSource` you could get from the connection."""
  totalCount: Int!
}

"""A `DataSource` edge in the connection."""
type DataSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSource` at the end of the edge."""
  node: DataSource!
}

"""Methods to use when ordering `DataSource`."""
enum DataSourcesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CONFIG_ASC
  CONFIG_DESC
  CURSOR_ASC
  CURSOR_DESC
  NATURAL
  PLUGIN_UID_ASC
  PLUGIN_UID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPO_DID_ASC
  REPO_DID_DESC
  UID_ASC
  UID_DESC
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""A connection to a list of `Entity` values."""
type EntitiesConnection {
  """
  A list of edges which contains the `Entity` and cursor to aid in pagination.
  """
  edges: [EntitiesEdge!]!

  """A list of `Entity` objects."""
  nodes: [Entity!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Entity` you could get from the connection."""
  totalCount: Int!
}

"""A `Entity` edge in the connection."""
type EntitiesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Entity` at the end of the edge."""
  node: Entity!
}

"""Methods to use when ordering `Entity`."""
enum EntitiesOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  TYPE_ASC
  TYPE_DESC
  UID_ASC
  UID_DESC
}

type Entity {
  """Reads and enables pagination through a set of `Metadatum`."""
  metadataByTarget(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MetadatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Metadatum`."""
    orderBy: [MetadataOrderBy!] = [NATURAL]
  ): MetadataConnection!

  """Reads a single `Revision` that is related to this `Entity`."""
  revision: Revision
  revisionId: String!
  type: String!
  uid: String!
}

"""
A condition to be used against `Entity` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EntityCondition {
  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Entity` object types. All fields are combined with a logical ‘and.’
"""
input EntityFilter {
  """Checks for all expressions in this list."""
  and: [EntityFilter!]

  """Filter by the object’s `metadataByTarget` relation."""
  metadataByTarget: EntityToManyMetadatumFilter

  """Some related `metadataByTarget` exist."""
  metadataByTargetExist: Boolean

  """Negates the expression."""
  not: EntityFilter

  """Checks for any expressions in this list."""
  or: [EntityFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A filter to be used against many `Metadatum` object types. All fields are combined with a logical ‘and.’
"""
input EntityToManyMetadatumFilter {
  """
  Every related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MetadatumFilter

  """
  No related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MetadatumFilter

  """
  Some related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MetadatumFilter
}

type FailedDatasourceFetch {
  datasourceUid: String!
  errorDetails: JSON
  errorMessage: String!
  timestamp: Datetime!
  uri: String!
}

"""
A condition to be used against `FailedDatasourceFetch` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FailedDatasourceFetchCondition {
  """Checks for equality with the object’s `datasourceUid` field."""
  datasourceUid: String

  """Checks for equality with the object’s `errorDetails` field."""
  errorDetails: JSON

  """Checks for equality with the object’s `errorMessage` field."""
  errorMessage: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `uri` field."""
  uri: String
}

"""
A filter to be used against `FailedDatasourceFetch` object types. All fields are combined with a logical ‘and.’
"""
input FailedDatasourceFetchFilter {
  """Checks for all expressions in this list."""
  and: [FailedDatasourceFetchFilter!]

  """Filter by the object’s `datasourceUid` field."""
  datasourceUid: StringFilter

  """Filter by the object’s `errorDetails` field."""
  errorDetails: JSONFilter

  """Filter by the object’s `errorMessage` field."""
  errorMessage: StringFilter

  """Negates the expression."""
  not: FailedDatasourceFetchFilter

  """Checks for any expressions in this list."""
  or: [FailedDatasourceFetchFilter!]

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `uri` field."""
  uri: StringFilter
}

"""A connection to a list of `FailedDatasourceFetch` values."""
type FailedDatasourceFetchesConnection {
  """
  A list of edges which contains the `FailedDatasourceFetch` and cursor to aid in pagination.
  """
  edges: [FailedDatasourceFetchesEdge!]!

  """A list of `FailedDatasourceFetch` objects."""
  nodes: [FailedDatasourceFetch!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FailedDatasourceFetch` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FailedDatasourceFetch` edge in the connection."""
type FailedDatasourceFetchesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FailedDatasourceFetch` at the end of the edge."""
  node: FailedDatasourceFetch!
}

"""Methods to use when ordering `FailedDatasourceFetch`."""
enum FailedDatasourceFetchesOrderBy {
  DATASOURCE_UID_ASC
  DATASOURCE_UID_DESC
  ERROR_DETAILS_ASC
  ERROR_DETAILS_DESC
  ERROR_MESSAGE_ASC
  ERROR_MESSAGE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  URI_ASC
  URI_DESC
}

type File {
  additionalMetadata: String
  bitrate: Int
  cid: String
  codec: String
  contentSize: Int
  contentUrl: String!

  """Reads and enables pagination through a set of `Contributor`."""
  contributorsByProfilePicture(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributorsConnection!
  duration: Float

  """Reads and enables pagination through a set of `License`."""
  licensesByMediaAssetTeaserImageUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileMediaAssetsByFileToMediaAssetAAndBManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!
  mimeType: String
  resolution: String

  """Reads a single `Revision` that is related to this `File`."""
  revision: Revision
  revisionId: String!

  """Reads and enables pagination through a set of `Subtitle`."""
  subtitles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Subtitle`."""
    orderBy: [SubtitlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileSubtitlesByFileToSubtitleAAndBManyToManyConnection!
  uid: String!
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `additionalMetadata` field."""
  additionalMetadata: String

  """Checks for equality with the object’s `bitrate` field."""
  bitrate: Int

  """Checks for equality with the object’s `cid` field."""
  cid: String

  """Checks for equality with the object’s `codec` field."""
  codec: String

  """Checks for equality with the object’s `contentSize` field."""
  contentSize: Int

  """Checks for equality with the object’s `contentUrl` field."""
  contentUrl: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `resolution` field."""
  resolution: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Filter by the object’s `additionalMetadata` field."""
  additionalMetadata: StringFilter

  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Filter by the object’s `bitrate` field."""
  bitrate: IntFilter

  """Filter by the object’s `cid` field."""
  cid: StringFilter

  """Filter by the object’s `codec` field."""
  codec: StringFilter

  """Filter by the object’s `contentSize` field."""
  contentSize: IntFilter

  """Filter by the object’s `contentUrl` field."""
  contentUrl: StringFilter

  """Filter by the object’s `contributorsByProfilePicture` relation."""
  contributorsByProfilePicture: FileToManyContributorFilter

  """Some related `contributorsByProfilePicture` exist."""
  contributorsByProfilePictureExist: Boolean

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `mediaAssetsByTeaserImage` relation."""
  mediaAssetsByTeaserImage: FileToManyMediaAssetFilter

  """Some related `mediaAssetsByTeaserImage` exist."""
  mediaAssetsByTeaserImageExist: Boolean

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Negates the expression."""
  not: FileFilter

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Filter by the object’s `resolution` field."""
  resolution: StringFilter

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `License` values, with data from `MediaAsset`.
"""
type FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `MediaAsset`."""
type FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `MediaAsset` values, with data from `_FileToMediaAsset`.
"""
type FileMediaAssetsByFileToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_FileToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileMediaAssetsByFileToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_FileToMediaAsset`.
"""
type FileMediaAssetsByFileToMediaAssetAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_FileToMediaAsset`."""
  _fileToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _FileToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _FileToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_FileToMediaAsset`."""
    orderBy: [_FileToMediaAssetsOrderBy!] = [NATURAL]
  ): _FileToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""
A connection to a list of `Subtitle` values, with data from `_FileToSubtitle`.
"""
type FileSubtitlesByFileToSubtitleAAndBManyToManyConnection {
  """
  A list of edges which contains the `Subtitle`, info from the `_FileToSubtitle`, and the cursor to aid in pagination.
  """
  edges: [FileSubtitlesByFileToSubtitleAAndBManyToManyEdge!]!

  """A list of `Subtitle` objects."""
  nodes: [Subtitle!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Subtitle` you could get from the connection."""
  totalCount: Int!
}

"""A `Subtitle` edge in the connection, with data from `_FileToSubtitle`."""
type FileSubtitlesByFileToSubtitleAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_FileToSubtitle`."""
  _fileToSubtitlesByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _FileToSubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _FileToSubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_FileToSubtitle`."""
    orderBy: [_FileToSubtitlesOrderBy!] = [NATURAL]
  ): _FileToSubtitlesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Subtitle` at the end of the edge."""
  node: Subtitle!
}

"""
A filter to be used against many `Contributor` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyContributorFilter {
  """
  Every related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContributorFilter

  """
  No related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContributorFilter

  """
  Some related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContributorFilter
}

"""
A filter to be used against many `MediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input FileToManyMediaAssetFilter {
  """
  Every related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MediaAssetFilter

  """
  No related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MediaAssetFilter

  """
  Some related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MediaAssetFilter
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  ADDITIONAL_METADATA_ASC
  ADDITIONAL_METADATA_DESC
  BITRATE_ASC
  BITRATE_DESC
  CID_ASC
  CID_DESC
  CODEC_ASC
  CODEC_DESC
  CONTENT_SIZE_ASC
  CONTENT_SIZE_DESC
  CONTENT_URL_ASC
  CONTENT_URL_DESC
  DURATION_ASC
  DURATION_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RESOLUTION_ASC
  RESOLUTION_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value."""
  equalTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float

  """Included in the specified list."""
  in: [Float!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """Not included in the specified list."""
  notIn: [Float!]
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type License {
  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupingsByContentItemLicenseUidAndPrimaryGroupingUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetLicenseUidAndTeaserImageUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!
  name: String!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByContentItemLicenseUidAndPublicationServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensePublicationServicesByContentItemLicenseUidAndPublicationServiceUidManyToManyConnection!

  """Reads a single `Revision` that is related to this `License`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `License` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LicenseCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `ContentItem`.
"""
type LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `ContentItem`.
"""
type LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `License` object types. All fields are combined with a logical ‘and.’
"""
input LicenseFilter {
  """Checks for all expressions in this list."""
  and: [LicenseFilter!]

  """Filter by the object’s `contentGroupings` relation."""
  contentGroupings: LicenseToManyContentGroupingFilter

  """Some related `contentGroupings` exist."""
  contentGroupingsExist: Boolean

  """Filter by the object’s `contentItems` relation."""
  contentItems: LicenseToManyContentItemFilter

  """Some related `contentItems` exist."""
  contentItemsExist: Boolean

  """Filter by the object’s `mediaAssets` relation."""
  mediaAssets: LicenseToManyMediaAssetFilter

  """Some related `mediaAssets` exist."""
  mediaAssetsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: LicenseFilter

  """Checks for any expressions in this list."""
  or: [LicenseFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `PublicationService` values, with data from `ContentItem`.
"""
type LicensePublicationServicesByContentItemLicenseUidAndPublicationServiceUidManyToManyConnection {
  """
  A list of edges which contains the `PublicationService`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [LicensePublicationServicesByContentItemLicenseUidAndPublicationServiceUidManyToManyEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `PublicationService` edge in the connection, with data from `ContentItem`.
"""
type LicensePublicationServicesByContentItemLicenseUidAndPublicationServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""
A filter to be used against many `ContentGrouping` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyContentGroupingFilter {
  """
  Every related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentGroupingFilter

  """
  No related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentGroupingFilter

  """
  Some related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentGroupingFilter
}

"""
A filter to be used against many `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyContentItemFilter {
  """
  Every related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentItemFilter

  """
  No related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentItemFilter

  """
  Some related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentItemFilter
}

"""
A filter to be used against many `MediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input LicenseToManyMediaAssetFilter {
  """
  Every related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MediaAssetFilter

  """
  No related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MediaAssetFilter

  """
  Some related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MediaAssetFilter
}

"""A connection to a list of `License` values."""
type LicensesConnection {
  """
  A list of edges which contains the `License` and cursor to aid in pagination.
  """
  edges: [LicensesEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection."""
type LicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""Methods to use when ordering `License`."""
enum LicensesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

type MediaAsset {
  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyConnection!
  description: String
  duration: Float

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetFilesByFileToMediaAssetBAndAManyToManyConnection!

  """Reads a single `License` that is related to this `MediaAsset`."""
  license: License
  licenseUid: String
  mediaType: String!

  """Reads a single `Revision` that is related to this `MediaAsset`."""
  revision: Revision
  revisionId: String!

  """Reads and enables pagination through a set of `Subtitle`."""
  subtitles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Subtitle`."""
    orderBy: [SubtitlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubtitlesConnection!

  """Reads a single `File` that is related to this `MediaAsset`."""
  teaserImage: File
  teaserImageUid: String
  title: String!

  """Reads and enables pagination through a set of `Transcript`."""
  transcripts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranscriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranscriptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transcript`."""
    orderBy: [TranscriptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranscriptsConnection!

  """Reads and enables pagination through a set of `Translation`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranslationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranslationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Translation`."""
    orderBy: [TranslationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranslationsConnection!
  uid: String!
}

"""
A connection to a list of `Concept` values, with data from `_ConceptToMediaAsset`.
"""
type MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `_ConceptToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""
A `Concept` edge in the connection, with data from `_ConceptToMediaAsset`.
"""
type MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToMediaAsset`."""
  _conceptToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToMediaAsset`."""
    orderBy: [_ConceptToMediaAssetsOrderBy!] = [NATURAL]
  ): _ConceptToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `MediaAsset` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MediaAssetCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `mediaType` field."""
  mediaType: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `teaserImageUid` field."""
  teaserImageUid: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentItemToMediaAsset`.
"""
type MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentItemToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentItemToMediaAsset`.
"""
type MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToMediaAsset`.
  """
  _contentItemToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToMediaAsset`."""
    orderBy: [_ContentItemToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContentItemToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A connection to a list of `Contribution` values, with data from `_ContributionToMediaAsset`.
"""
type MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ContributionToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ContributionToMediaAsset`.
"""
type MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToMediaAsset`.
  """
  _contributionToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToMediaAsset`."""
    orderBy: [_ContributionToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContributionToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A connection to a list of `File` values, with data from `_FileToMediaAsset`.
"""
type MediaAssetFilesByFileToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `_FileToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetFilesByFileToMediaAssetBAndAManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `_FileToMediaAsset`."""
type MediaAssetFilesByFileToMediaAssetBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_FileToMediaAsset`."""
  _fileToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _FileToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _FileToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_FileToMediaAsset`."""
    orderBy: [_FileToMediaAssetsOrderBy!] = [NATURAL]
  ): _FileToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `MediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetFilter {
  """Checks for all expressions in this list."""
  and: [MediaAssetFilter!]

  """Filter by the object’s `chapters` relation."""
  chapters: MediaAssetToManyChapterFilter

  """Some related `chapters` exist."""
  chaptersExist: Boolean

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `license` relation."""
  license: LicenseFilter

  """A related `license` exists."""
  licenseExists: Boolean

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Filter by the object’s `mediaType` field."""
  mediaType: StringFilter

  """Negates the expression."""
  not: MediaAssetFilter

  """Checks for any expressions in this list."""
  or: [MediaAssetFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `subtitles` relation."""
  subtitles: MediaAssetToManySubtitleFilter

  """Some related `subtitles` exist."""
  subtitlesExist: Boolean

  """Filter by the object’s `teaserImage` relation."""
  teaserImage: FileFilter

  """A related `teaserImage` exists."""
  teaserImageExists: Boolean

  """Filter by the object’s `teaserImageUid` field."""
  teaserImageUid: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `transcripts` relation."""
  transcripts: MediaAssetToManyTranscriptFilter

  """Some related `transcripts` exist."""
  transcriptsExist: Boolean

  """Filter by the object’s `translations` relation."""
  translations: MediaAssetToManyTranslationFilter

  """Some related `translations` exist."""
  translationsExist: Boolean

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A filter to be used against many `Chapter` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetToManyChapterFilter {
  """
  Every related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChapterFilter

  """
  No related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChapterFilter

  """
  Some related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChapterFilter
}

"""
A filter to be used against many `Subtitle` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetToManySubtitleFilter {
  """
  Every related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SubtitleFilter

  """
  No related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SubtitleFilter

  """
  Some related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SubtitleFilter
}

"""
A filter to be used against many `Transcript` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetToManyTranscriptFilter {
  """
  Every related `Transcript` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TranscriptFilter

  """
  No related `Transcript` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TranscriptFilter

  """
  Some related `Transcript` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TranscriptFilter
}

"""
A filter to be used against many `Translation` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetToManyTranslationFilter {
  """
  Every related `Translation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TranslationFilter

  """
  No related `Translation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TranslationFilter

  """
  Some related `Translation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TranslationFilter
}

"""A connection to a list of `MediaAsset` values."""
type MediaAssetsConnection {
  """
  A list of edges which contains the `MediaAsset` and cursor to aid in pagination.
  """
  edges: [MediaAssetsEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaAsset` edge in the connection."""
type MediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""Methods to use when ordering `MediaAsset`."""
enum MediaAssetsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DURATION_ASC
  DURATION_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  MEDIA_TYPE_ASC
  MEDIA_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  TEASER_IMAGE_UID_ASC
  TEASER_IMAGE_UID_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
}

"""A connection to a list of `Metadatum` values."""
type MetadataConnection {
  """
  A list of edges which contains the `Metadatum` and cursor to aid in pagination.
  """
  edges: [MetadataEdge!]!

  """A list of `Metadatum` objects."""
  nodes: [Metadatum!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Metadatum` you could get from the connection."""
  totalCount: Int!
}

"""A `Metadatum` edge in the connection."""
type MetadataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Metadatum` at the end of the edge."""
  node: Metadatum!
}

"""Methods to use when ordering `Metadatum`."""
enum MetadataOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  NAMESPACE_ASC
  NAMESPACE_DESC
  NATURAL
  REVISION_ID_ASC
  REVISION_ID_DESC
  TARGET_UID_ASC
  TARGET_UID_DESC
  UID_ASC
  UID_DESC
}

type Metadatum {
  content: JSON!
  namespace: String!

  """Reads a single `Revision` that is related to this `Metadatum`."""
  revision: Revision
  revisionId: String!

  """Reads a single `Entity` that is related to this `Metadatum`."""
  target: Entity
  targetUid: String!
  uid: String!
}

"""
A condition to be used against `Metadatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MetadatumCondition {
  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `namespace` field."""
  namespace: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `targetUid` field."""
  targetUid: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Metadatum` object types. All fields are combined with a logical ‘and.’
"""
input MetadatumFilter {
  """Checks for all expressions in this list."""
  and: [MetadatumFilter!]

  """Filter by the object’s `content` field."""
  content: JSONFilter

  """Filter by the object’s `namespace` field."""
  namespace: StringFilter

  """Negates the expression."""
  not: MetadatumFilter

  """Checks for any expressions in this list."""
  or: [MetadatumFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `target` relation."""
  target: EntityFilter

  """Filter by the object’s `targetUid` field."""
  targetUid: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PublicationService {
  address: String!

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEventsByBroadcastService(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupingsByContentItemPublicationServiceUidAndPrimaryGroupingUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServiceContentGroupingsByContentItemPublicationServiceUidAndPrimaryGroupingUidManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByBroadcastEventBroadcastServiceUidAndContentItemUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByContentItemPublicationServiceUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServiceLicensesByContentItemPublicationServiceUidAndLicenseUidManyToManyConnection!
  medium: String
  name: String!

  """
  Reads a single `Contributor` that is related to this `PublicationService`.
  """
  publisher: Contributor
  publisherUid: String

  """
  Reads a single `Revision` that is related to this `PublicationService`.
  """
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `PublicationService` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PublicationServiceCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `medium` field."""
  medium: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `publisherUid` field."""
  publisherUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `ContentItem`.
"""
type PublicationServiceContentGroupingsByContentItemPublicationServiceUidAndPrimaryGroupingUidManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [PublicationServiceContentGroupingsByContentItemPublicationServiceUidAndPrimaryGroupingUidManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `ContentItem`.
"""
type PublicationServiceContentGroupingsByContentItemPublicationServiceUidAndPrimaryGroupingUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""
A connection to a list of `ContentItem` values, with data from `BroadcastEvent`.
"""
type PublicationServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [PublicationServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `BroadcastEvent`.
"""
type PublicationServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `PublicationService` object types. All fields are combined with a logical ‘and.’
"""
input PublicationServiceFilter {
  """Filter by the object’s `address` field."""
  address: StringFilter

  """Checks for all expressions in this list."""
  and: [PublicationServiceFilter!]

  """Filter by the object’s `broadcastEventsByBroadcastService` relation."""
  broadcastEventsByBroadcastService: PublicationServiceToManyBroadcastEventFilter

  """Some related `broadcastEventsByBroadcastService` exist."""
  broadcastEventsByBroadcastServiceExist: Boolean

  """Filter by the object’s `contentItems` relation."""
  contentItems: PublicationServiceToManyContentItemFilter

  """Some related `contentItems` exist."""
  contentItemsExist: Boolean

  """Filter by the object’s `medium` field."""
  medium: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PublicationServiceFilter

  """Checks for any expressions in this list."""
  or: [PublicationServiceFilter!]

  """Filter by the object’s `publisher` relation."""
  publisher: ContributorFilter

  """A related `publisher` exists."""
  publisherExists: Boolean

  """Filter by the object’s `publisherUid` field."""
  publisherUid: StringFilter

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `License` values, with data from `ContentItem`.
"""
type PublicationServiceLicensesByContentItemPublicationServiceUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [PublicationServiceLicensesByContentItemPublicationServiceUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentItem`."""
type PublicationServiceLicensesByContentItemPublicationServiceUidAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A filter to be used against many `BroadcastEvent` object types. All fields are combined with a logical ‘and.’
"""
input PublicationServiceToManyBroadcastEventFilter {
  """
  Every related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BroadcastEventFilter

  """
  No related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BroadcastEventFilter

  """
  Some related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BroadcastEventFilter
}

"""
A filter to be used against many `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input PublicationServiceToManyContentItemFilter {
  """
  Every related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentItemFilter

  """
  No related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentItemFilter

  """
  Some related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentItemFilter
}

"""A connection to a list of `PublicationService` values."""
type PublicationServicesConnection {
  """
  A list of edges which contains the `PublicationService` and cursor to aid in pagination.
  """
  edges: [PublicationServicesEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""A `PublicationService` edge in the connection."""
type PublicationServicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""Methods to use when ordering `PublicationService`."""
enum PublicationServicesOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  MEDIUM_ASC
  MEDIUM_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHER_UID_ASC
  PUBLISHER_UID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

"""The root query type which gives access points into the data universe."""
type Query {
  agent(did: String!): Agent

  """Reads and enables pagination through a set of `Agent`."""
  agents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AgentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AgentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Agent`."""
    orderBy: [AgentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AgentsConnection
  block(cid: String!): Block

  """Reads and enables pagination through a set of `Block`."""
  blocks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlockFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Block`."""
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BlocksConnection
  broadcastEvent(uid: String!): BroadcastEvent

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection
  chapter(uid: String!): Chapter

  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection
  commit(rootCid: String!): Commit

  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection
  concept(uid: String!): Concept

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection
  contentGrouping(uid: String!): ContentGrouping

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection
  contentItem(uid: String!): ContentItem

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection
  contribution(uid: String!): Contribution

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionsConnection
  contributor(uid: String!): Contributor

  """Reads and enables pagination through a set of `Contributor`."""
  contributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributorsConnection
  dataSource(uid: String!): DataSource

  """Reads and enables pagination through a set of `DataSource`."""
  dataSources(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DataSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesConnection

  """Reads and enables pagination through a set of `Entity`."""
  entities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EntityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Entity`."""
    orderBy: [EntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EntitiesConnection
  entity(uid: String!): Entity
  failedDatasourceFetch(datasourceUid: String!, uri: String!): FailedDatasourceFetch

  """Reads and enables pagination through a set of `FailedDatasourceFetch`."""
  failedDatasourceFetches(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FailedDatasourceFetchCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FailedDatasourceFetchFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FailedDatasourceFetch`."""
    orderBy: [FailedDatasourceFetchesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FailedDatasourceFetchesConnection
  file(uid: String!): File

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection
  license(uid: String!): License

  """Reads and enables pagination through a set of `License`."""
  licenses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesConnection
  mediaAsset(uid: String!): MediaAsset

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection

  """Reads and enables pagination through a set of `Metadatum`."""
  metadata(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MetadatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Metadatum`."""
    orderBy: [MetadataOrderBy!] = [NATURAL]
  ): MetadataConnection
  publicationService(uid: String!): PublicationService

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServices(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServicesConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  repo(did: String!): Repo

  """Reads and enables pagination through a set of `Repo`."""
  repos(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RepoCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RepoFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Repo`."""
    orderBy: [ReposOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReposConnection
  revision(id: String!): Revision

  """Reads and enables pagination through a set of `Revision`."""
  revisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection
  sourceRecord(uid: String!): SourceRecord

  """Reads and enables pagination through a set of `SourceRecord`."""
  sourceRecords(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SourceRecordCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SourceRecordFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SourceRecord`."""
    orderBy: [SourceRecordsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SourceRecordsConnection
  subtitle(uid: String!): Subtitle

  """Reads and enables pagination through a set of `Subtitle`."""
  subtitles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Subtitle`."""
    orderBy: [SubtitlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubtitlesConnection
  transcript(uid: String!): Transcript

  """Reads and enables pagination through a set of `Transcript`."""
  transcripts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranscriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranscriptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transcript`."""
    orderBy: [TranscriptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranscriptsConnection
  translation(uid: String!): Translation

  """Reads and enables pagination through a set of `Translation`."""
  translations(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranslationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranslationFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Translation`."""
    orderBy: [TranslationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranslationsConnection
  ucan(cid: String!): Ucan

  """Reads and enables pagination through a set of `Ucan`."""
  ucans(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UcanCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UcanFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Ucan`."""
    orderBy: [UcansOrderBy!] = [PRIMARY_KEY_ASC]
  ): UcansConnection
  user(did: String!): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

type Repo {
  """Reads and enables pagination through a set of `Agent`."""
  agentsByCommitRepoDidAndAgentDid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AgentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AgentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Agent`."""
    orderBy: [AgentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RepoAgentsByCommitRepoDidAndAgentDidManyToManyConnection!

  """Reads a single `Commit` that is related to this `Repo`."""
  commitByHead: Commit

  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """Reads and enables pagination through a set of `Commit`."""
  commitsByCommitRepoDidAndParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RepoCommitsByCommitRepoDidAndParentManyToManyConnection!

  """Reads and enables pagination through a set of `DataSource`."""
  dataSources(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DataSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesConnection!
  did: String!
  gateways: [String]
  head: String
  name: String

  """Reads and enables pagination through a set of `Revision`."""
  revisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection!
  tail: String
}

"""A connection to a list of `Agent` values, with data from `Commit`."""
type RepoAgentsByCommitRepoDidAndAgentDidManyToManyConnection {
  """
  A list of edges which contains the `Agent`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [RepoAgentsByCommitRepoDidAndAgentDidManyToManyEdge!]!

  """A list of `Agent` objects."""
  nodes: [Agent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Agent` you could get from the connection."""
  totalCount: Int!
}

"""A `Agent` edge in the connection, with data from `Commit`."""
type RepoAgentsByCommitRepoDidAndAgentDidManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Agent` at the end of the edge."""
  node: Agent!
}

"""A connection to a list of `Commit` values, with data from `Commit`."""
type RepoCommitsByCommitRepoDidAndParentManyToManyConnection {
  """
  A list of edges which contains the `Commit`, info from the `Commit`, and the cursor to aid in pagination.
  """
  edges: [RepoCommitsByCommitRepoDidAndParentManyToManyEdge!]!

  """A list of `Commit` objects."""
  nodes: [Commit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Commit` you could get from the connection."""
  totalCount: Int!
}

"""A `Commit` edge in the connection, with data from `Commit`."""
type RepoCommitsByCommitRepoDidAndParentManyToManyEdge {
  """Reads and enables pagination through a set of `Commit`."""
  commitsByParent(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Commit` at the end of the edge."""
  node: Commit!
}

"""
A condition to be used against `Repo` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RepoCondition {
  """Checks for equality with the object’s `did` field."""
  did: String

  """Checks for equality with the object’s `gateways` field."""
  gateways: [String]

  """Checks for equality with the object’s `head` field."""
  head: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `tail` field."""
  tail: String
}

"""
A filter to be used against `Repo` object types. All fields are combined with a logical ‘and.’
"""
input RepoFilter {
  """Checks for all expressions in this list."""
  and: [RepoFilter!]

  """Filter by the object’s `commitByHead` relation."""
  commitByHead: CommitFilter

  """A related `commitByHead` exists."""
  commitByHeadExists: Boolean

  """Filter by the object’s `commits` relation."""
  commits: RepoToManyCommitFilter

  """Some related `commits` exist."""
  commitsExist: Boolean

  """Filter by the object’s `dataSources` relation."""
  dataSources: RepoToManyDataSourceFilter

  """Some related `dataSources` exist."""
  dataSourcesExist: Boolean

  """Filter by the object’s `did` field."""
  did: StringFilter

  """Filter by the object’s `gateways` field."""
  gateways: StringListFilter

  """Filter by the object’s `head` field."""
  head: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: RepoFilter

  """Checks for any expressions in this list."""
  or: [RepoFilter!]

  """Filter by the object’s `revisions` relation."""
  revisions: RepoToManyRevisionFilter

  """Some related `revisions` exist."""
  revisionsExist: Boolean

  """Filter by the object’s `tail` field."""
  tail: StringFilter
}

"""
A filter to be used against many `Commit` object types. All fields are combined with a logical ‘and.’
"""
input RepoToManyCommitFilter {
  """
  Every related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CommitFilter

  """
  No related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CommitFilter

  """
  Some related `Commit` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CommitFilter
}

"""
A filter to be used against many `DataSource` object types. All fields are combined with a logical ‘and.’
"""
input RepoToManyDataSourceFilter {
  """
  Every related `DataSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DataSourceFilter

  """
  No related `DataSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DataSourceFilter

  """
  Some related `DataSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DataSourceFilter
}

"""
A filter to be used against many `Revision` object types. All fields are combined with a logical ‘and.’
"""
input RepoToManyRevisionFilter {
  """
  Every related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RevisionFilter

  """
  No related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RevisionFilter

  """
  Some related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RevisionFilter
}

"""A connection to a list of `Repo` values."""
type ReposConnection {
  """
  A list of edges which contains the `Repo` and cursor to aid in pagination.
  """
  edges: [ReposEdge!]!

  """A list of `Repo` objects."""
  nodes: [Repo!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Repo` you could get from the connection."""
  totalCount: Int!
}

"""A `Repo` edge in the connection."""
type ReposEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Repo` at the end of the edge."""
  node: Repo!
}

"""Methods to use when ordering `Repo`."""
enum ReposOrderBy {
  DID_ASC
  DID_DESC
  GATEWAYS_ASC
  GATEWAYS_DESC
  HEAD_ASC
  HEAD_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAIL_ASC
  TAIL_DESC
}

type Revision {
  """Reads a single `Agent` that is related to this `Revision`."""
  agent: Agent
  agentDid: String!

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """Reads and enables pagination through a set of `Commit`."""
  commits(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Commit`."""
    orderBy: [CommitsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionCommitsByRevisionToCommitBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """Reads and enables pagination through a set of `Concept`."""
  conceptsByConceptRevisionIdAndParentUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionConceptsByConceptRevisionIdAndParentUidManyToManyConnection!

  """Reads and enables pagination through a set of `Concept`."""
  conceptsByConceptRevisionIdAndSameAsUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionConceptsByConceptRevisionIdAndSameAsUidManyToManyConnection!
  contentCid: String!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupingsByContentItemRevisionIdAndPrimaryGroupingUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByBroadcastEventRevisionIdAndContentItemUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionsConnection!

  """Reads and enables pagination through a set of `Contributor`."""
  contributors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributorsConnection!

  """Reads and enables pagination through a set of `Contributor`."""
  contributorsByPublicationServiceRevisionIdAndPublisherUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionContributorsByPublicationServiceRevisionIdAndPublisherUidManyToManyConnection!
  dateCreated: Datetime!
  dateModified: Datetime!
  derivedFromUid: String

  """Reads and enables pagination through a set of `Entity`."""
  entities(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EntityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Entity`."""
    orderBy: [EntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): EntitiesConnection!

  """Reads and enables pagination through a set of `Entity`."""
  entitiesByMetadatumRevisionIdAndTargetUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EntityCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EntityFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Entity`."""
    orderBy: [EntitiesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionEntitiesByMetadatumRevisionIdAndTargetUidManyToManyConnection!
  entityType: String!
  entityUris: [String]

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByContributorRevisionIdAndProfilePictureUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionFilesByContributorRevisionIdAndProfilePictureUidManyToManyConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetRevisionIdAndTeaserImageUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyConnection!
  id: String!
  isDeleted: Boolean!

  """Reads and enables pagination through a set of `License`."""
  licenses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByContentGroupingRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByContentItemRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByMediaAssetRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByChapterRevisionIdAndMediaAssetUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsBySubtitleRevisionIdAndMediaAssetUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionMediaAssetsBySubtitleRevisionIdAndMediaAssetUidManyToManyConnection!

  """Reads and enables pagination through a set of `Metadatum`."""
  metadata(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MetadatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Metadatum`."""
    orderBy: [MetadataOrderBy!] = [NATURAL]
  ): MetadataConnection!

  """Reads a single `Revision` that is related to this `Revision`."""
  prevRevision: Revision
  prevRevisionId: String

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServices(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServicesConnection!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByBroadcastEventRevisionIdAndBroadcastServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionPublicationServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyConnection!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByContentItemRevisionIdAndPublicationServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionPublicationServicesByContentItemRevisionIdAndPublicationServiceUidManyToManyConnection!

  """Reads a single `Repo` that is related to this `Revision`."""
  repo: Repo
  repoDid: String!
  revisionCid: String!
  revisionUris: [String]

  """Reads and enables pagination through a set of `Revision`."""
  revisionsByPrevRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection!

  """Reads and enables pagination through a set of `Subtitle`."""
  subtitles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Subtitle`."""
    orderBy: [SubtitlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubtitlesConnection!
  uid: String!
}

"""
A connection to a list of `Commit` values, with data from `_RevisionToCommit`.
"""
type RevisionCommitsByRevisionToCommitBAndAManyToManyConnection {
  """
  A list of edges which contains the `Commit`, info from the `_RevisionToCommit`, and the cursor to aid in pagination.
  """
  edges: [RevisionCommitsByRevisionToCommitBAndAManyToManyEdge!]!

  """A list of `Commit` objects."""
  nodes: [Commit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Commit` you could get from the connection."""
  totalCount: Int!
}

"""A `Commit` edge in the connection, with data from `_RevisionToCommit`."""
type RevisionCommitsByRevisionToCommitBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_RevisionToCommit`."""
  _revisionToCommitsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _RevisionToCommitCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _RevisionToCommitFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_RevisionToCommit`."""
    orderBy: [_RevisionToCommitsOrderBy!] = [NATURAL]
  ): _RevisionToCommitsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Commit` at the end of the edge."""
  node: Commit!
}

"""A connection to a list of `Concept` values, with data from `Concept`."""
type RevisionConceptsByConceptRevisionIdAndParentUidManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `Concept`, and the cursor to aid in pagination.
  """
  edges: [RevisionConceptsByConceptRevisionIdAndParentUidManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection, with data from `Concept`."""
type RevisionConceptsByConceptRevisionIdAndParentUidManyToManyEdge {
  """Reads and enables pagination through a set of `Concept`."""
  childConcepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""A connection to a list of `Concept` values, with data from `Concept`."""
type RevisionConceptsByConceptRevisionIdAndSameAsUidManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `Concept`, and the cursor to aid in pagination.
  """
  edges: [RevisionConceptsByConceptRevisionIdAndSameAsUidManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection, with data from `Concept`."""
type RevisionConceptsByConceptRevisionIdAndSameAsUidManyToManyEdge {
  """Reads and enables pagination through a set of `Concept`."""
  conceptsBySameAs(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `Revision` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RevisionCondition {
  """Checks for equality with the object’s `agentDid` field."""
  agentDid: String

  """Checks for equality with the object’s `contentCid` field."""
  contentCid: String

  """Checks for equality with the object’s `dateCreated` field."""
  dateCreated: Datetime

  """Checks for equality with the object’s `dateModified` field."""
  dateModified: Datetime

  """Checks for equality with the object’s `derivedFromUid` field."""
  derivedFromUid: String

  """Checks for equality with the object’s `entityType` field."""
  entityType: String

  """Checks for equality with the object’s `entityUris` field."""
  entityUris: [String]

  """Checks for equality with the object’s `id` field."""
  id: String

  """Checks for equality with the object’s `isDeleted` field."""
  isDeleted: Boolean

  """Checks for equality with the object’s `prevRevisionId` field."""
  prevRevisionId: String

  """Checks for equality with the object’s `repoDid` field."""
  repoDid: String

  """Checks for equality with the object’s `revisionCid` field."""
  revisionCid: String

  """Checks for equality with the object’s `revisionUris` field."""
  revisionUris: [String]

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `ContentItem`.
"""
type RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `ContentItem`.
"""
type RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""
A connection to a list of `ContentItem` values, with data from `BroadcastEvent`.
"""
type RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `BroadcastEvent`.
"""
type RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A connection to a list of `Contributor` values, with data from `PublicationService`.
"""
type RevisionContributorsByPublicationServiceRevisionIdAndPublisherUidManyToManyConnection {
  """
  A list of edges which contains the `Contributor`, info from the `PublicationService`, and the cursor to aid in pagination.
  """
  edges: [RevisionContributorsByPublicationServiceRevisionIdAndPublisherUidManyToManyEdge!]!

  """A list of `Contributor` objects."""
  nodes: [Contributor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contributor` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contributor` edge in the connection, with data from `PublicationService`.
"""
type RevisionContributorsByPublicationServiceRevisionIdAndPublisherUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contributor` at the end of the edge."""
  node: Contributor!

  """Reads and enables pagination through a set of `PublicationService`."""
  publicationServicesByPublisher(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicationServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicationServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PublicationService`."""
    orderBy: [PublicationServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PublicationServicesConnection!
}

"""A connection to a list of `Entity` values, with data from `Metadatum`."""
type RevisionEntitiesByMetadatumRevisionIdAndTargetUidManyToManyConnection {
  """
  A list of edges which contains the `Entity`, info from the `Metadatum`, and the cursor to aid in pagination.
  """
  edges: [RevisionEntitiesByMetadatumRevisionIdAndTargetUidManyToManyEdge!]!

  """A list of `Entity` objects."""
  nodes: [Entity!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Entity` you could get from the connection."""
  totalCount: Int!
}

"""A `Entity` edge in the connection, with data from `Metadatum`."""
type RevisionEntitiesByMetadatumRevisionIdAndTargetUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Metadatum`."""
  metadataByTarget(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MetadatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MetadatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Metadatum`."""
    orderBy: [MetadataOrderBy!] = [NATURAL]
  ): MetadataConnection!

  """The `Entity` at the end of the edge."""
  node: Entity!
}

"""A connection to a list of `File` values, with data from `Contributor`."""
type RevisionFilesByContributorRevisionIdAndProfilePictureUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `Contributor`, and the cursor to aid in pagination.
  """
  edges: [RevisionFilesByContributorRevisionIdAndProfilePictureUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `Contributor`."""
type RevisionFilesByContributorRevisionIdAndProfilePictureUidManyToManyEdge {
  """Reads and enables pagination through a set of `Contributor`."""
  contributorsByProfilePicture(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contributor`."""
    orderBy: [ContributorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributorsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `Revision` object types. All fields are combined with a logical ‘and.’
"""
input RevisionFilter {
  """Filter by the object’s `agent` relation."""
  agent: AgentFilter

  """Filter by the object’s `agentDid` field."""
  agentDid: StringFilter

  """Checks for all expressions in this list."""
  and: [RevisionFilter!]

  """Filter by the object’s `broadcastEvents` relation."""
  broadcastEvents: RevisionToManyBroadcastEventFilter

  """Some related `broadcastEvents` exist."""
  broadcastEventsExist: Boolean

  """Filter by the object’s `chapters` relation."""
  chapters: RevisionToManyChapterFilter

  """Some related `chapters` exist."""
  chaptersExist: Boolean

  """Filter by the object’s `concepts` relation."""
  concepts: RevisionToManyConceptFilter

  """Some related `concepts` exist."""
  conceptsExist: Boolean

  """Filter by the object’s `contentCid` field."""
  contentCid: StringFilter

  """Filter by the object’s `contentGroupings` relation."""
  contentGroupings: RevisionToManyContentGroupingFilter

  """Some related `contentGroupings` exist."""
  contentGroupingsExist: Boolean

  """Filter by the object’s `contentItems` relation."""
  contentItems: RevisionToManyContentItemFilter

  """Some related `contentItems` exist."""
  contentItemsExist: Boolean

  """Filter by the object’s `contributions` relation."""
  contributions: RevisionToManyContributionFilter

  """Some related `contributions` exist."""
  contributionsExist: Boolean

  """Filter by the object’s `contributors` relation."""
  contributors: RevisionToManyContributorFilter

  """Some related `contributors` exist."""
  contributorsExist: Boolean

  """Filter by the object’s `dateCreated` field."""
  dateCreated: DatetimeFilter

  """Filter by the object’s `dateModified` field."""
  dateModified: DatetimeFilter

  """Filter by the object’s `derivedFromUid` field."""
  derivedFromUid: StringFilter

  """Filter by the object’s `entities` relation."""
  entities: RevisionToManyEntityFilter

  """Some related `entities` exist."""
  entitiesExist: Boolean

  """Filter by the object’s `entityType` field."""
  entityType: StringFilter

  """Filter by the object’s `entityUris` field."""
  entityUris: StringListFilter

  """Filter by the object’s `files` relation."""
  files: RevisionToManyFileFilter

  """Some related `files` exist."""
  filesExist: Boolean

  """Filter by the object’s `id` field."""
  id: StringFilter

  """Filter by the object’s `isDeleted` field."""
  isDeleted: BooleanFilter

  """Filter by the object’s `licenses` relation."""
  licenses: RevisionToManyLicenseFilter

  """Some related `licenses` exist."""
  licensesExist: Boolean

  """Filter by the object’s `mediaAssets` relation."""
  mediaAssets: RevisionToManyMediaAssetFilter

  """Some related `mediaAssets` exist."""
  mediaAssetsExist: Boolean

  """Filter by the object’s `metadata` relation."""
  metadata: RevisionToManyMetadatumFilter

  """Some related `metadata` exist."""
  metadataExist: Boolean

  """Negates the expression."""
  not: RevisionFilter

  """Checks for any expressions in this list."""
  or: [RevisionFilter!]

  """Filter by the object’s `prevRevision` relation."""
  prevRevision: RevisionFilter

  """A related `prevRevision` exists."""
  prevRevisionExists: Boolean

  """Filter by the object’s `prevRevisionId` field."""
  prevRevisionId: StringFilter

  """Filter by the object’s `publicationServices` relation."""
  publicationServices: RevisionToManyPublicationServiceFilter

  """Some related `publicationServices` exist."""
  publicationServicesExist: Boolean

  """Filter by the object’s `repo` relation."""
  repo: RepoFilter

  """Filter by the object’s `repoDid` field."""
  repoDid: StringFilter

  """Filter by the object’s `revisionCid` field."""
  revisionCid: StringFilter

  """Filter by the object’s `revisionUris` field."""
  revisionUris: StringListFilter

  """Filter by the object’s `revisionsByPrevRevisionId` relation."""
  revisionsByPrevRevisionId: RevisionToManyRevisionFilter

  """Some related `revisionsByPrevRevisionId` exist."""
  revisionsByPrevRevisionIdExist: Boolean

  """Filter by the object’s `subtitles` relation."""
  subtitles: RevisionToManySubtitleFilter

  """Some related `subtitles` exist."""
  subtitlesExist: Boolean

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `License` values, with data from `ContentGrouping`.
"""
type RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentGrouping`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentGrouping`."""
type RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `License` values, with data from `ContentItem`.
"""
type RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentItem`."""
type RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `License` values, with data from `MediaAsset`.
"""
type RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `MediaAsset`."""
type RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `MediaAsset` values, with data from `Chapter`.
"""
type RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `Chapter`, and the cursor to aid in pagination.
  """
  edges: [RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaAsset` edge in the connection, with data from `Chapter`."""
type RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyEdge {
  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""
A connection to a list of `MediaAsset` values, with data from `Subtitle`.
"""
type RevisionMediaAssetsBySubtitleRevisionIdAndMediaAssetUidManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `Subtitle`, and the cursor to aid in pagination.
  """
  edges: [RevisionMediaAssetsBySubtitleRevisionIdAndMediaAssetUidManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaAsset` edge in the connection, with data from `Subtitle`."""
type RevisionMediaAssetsBySubtitleRevisionIdAndMediaAssetUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!

  """Reads and enables pagination through a set of `Subtitle`."""
  subtitles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Subtitle`."""
    orderBy: [SubtitlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubtitlesConnection!
}

"""
A connection to a list of `PublicationService` values, with data from `BroadcastEvent`.
"""
type RevisionPublicationServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyConnection {
  """
  A list of edges which contains the `PublicationService`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [RevisionPublicationServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `PublicationService` edge in the connection, with data from `BroadcastEvent`.
"""
type RevisionPublicationServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEventsByBroadcastService(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""
A connection to a list of `PublicationService` values, with data from `ContentItem`.
"""
type RevisionPublicationServicesByContentItemRevisionIdAndPublicationServiceUidManyToManyConnection {
  """
  A list of edges which contains the `PublicationService`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [RevisionPublicationServicesByContentItemRevisionIdAndPublicationServiceUidManyToManyEdge!]!

  """A list of `PublicationService` objects."""
  nodes: [PublicationService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PublicationService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `PublicationService` edge in the connection, with data from `ContentItem`.
"""
type RevisionPublicationServicesByContentItemRevisionIdAndPublicationServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicationService` at the end of the edge."""
  node: PublicationService!
}

"""
A filter to be used against many `BroadcastEvent` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyBroadcastEventFilter {
  """
  Every related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BroadcastEventFilter

  """
  No related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BroadcastEventFilter

  """
  Some related `BroadcastEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BroadcastEventFilter
}

"""
A filter to be used against many `Chapter` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyChapterFilter {
  """
  Every related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChapterFilter

  """
  No related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChapterFilter

  """
  Some related `Chapter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChapterFilter
}

"""
A filter to be used against many `Concept` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyConceptFilter {
  """
  Every related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ConceptFilter

  """
  No related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ConceptFilter

  """
  Some related `Concept` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ConceptFilter
}

"""
A filter to be used against many `ContentGrouping` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyContentGroupingFilter {
  """
  Every related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentGroupingFilter

  """
  No related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentGroupingFilter

  """
  Some related `ContentGrouping` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentGroupingFilter
}

"""
A filter to be used against many `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyContentItemFilter {
  """
  Every related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContentItemFilter

  """
  No related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContentItemFilter

  """
  Some related `ContentItem` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContentItemFilter
}

"""
A filter to be used against many `Contribution` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyContributionFilter {
  """
  Every related `Contribution` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContributionFilter

  """
  No related `Contribution` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContributionFilter

  """
  Some related `Contribution` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContributionFilter
}

"""
A filter to be used against many `Contributor` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyContributorFilter {
  """
  Every related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContributorFilter

  """
  No related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContributorFilter

  """
  Some related `Contributor` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContributorFilter
}

"""
A filter to be used against many `Entity` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyEntityFilter {
  """
  Every related `Entity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EntityFilter

  """
  No related `Entity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EntityFilter

  """
  Some related `Entity` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EntityFilter
}

"""
A filter to be used against many `File` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyFileFilter {
  """
  Every related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FileFilter

  """
  No related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FileFilter

  """
  Some related `File` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FileFilter
}

"""
A filter to be used against many `License` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyLicenseFilter {
  """
  Every related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LicenseFilter

  """
  No related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LicenseFilter

  """
  Some related `License` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LicenseFilter
}

"""
A filter to be used against many `MediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyMediaAssetFilter {
  """
  Every related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MediaAssetFilter

  """
  No related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MediaAssetFilter

  """
  Some related `MediaAsset` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MediaAssetFilter
}

"""
A filter to be used against many `Metadatum` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyMetadatumFilter {
  """
  Every related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MetadatumFilter

  """
  No related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MetadatumFilter

  """
  Some related `Metadatum` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MetadatumFilter
}

"""
A filter to be used against many `PublicationService` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyPublicationServiceFilter {
  """
  Every related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PublicationServiceFilter

  """
  No related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PublicationServiceFilter

  """
  Some related `PublicationService` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PublicationServiceFilter
}

"""
A filter to be used against many `Revision` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManyRevisionFilter {
  """
  Every related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RevisionFilter

  """
  No related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RevisionFilter

  """
  Some related `Revision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RevisionFilter
}

"""
A filter to be used against many `Subtitle` object types. All fields are combined with a logical ‘and.’
"""
input RevisionToManySubtitleFilter {
  """
  Every related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SubtitleFilter

  """
  No related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SubtitleFilter

  """
  Some related `Subtitle` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SubtitleFilter
}

"""A connection to a list of `Revision` values."""
type RevisionsConnection {
  """
  A list of edges which contains the `Revision` and cursor to aid in pagination.
  """
  edges: [RevisionsEdge!]!

  """A list of `Revision` objects."""
  nodes: [Revision!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Revision` you could get from the connection."""
  totalCount: Int!
}

"""A `Revision` edge in the connection."""
type RevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Revision` at the end of the edge."""
  node: Revision!
}

"""Methods to use when ordering `Revision`."""
enum RevisionsOrderBy {
  AGENT_DID_ASC
  AGENT_DID_DESC
  CONTENT_CID_ASC
  CONTENT_CID_DESC
  DATE_CREATED_ASC
  DATE_CREATED_DESC
  DATE_MODIFIED_ASC
  DATE_MODIFIED_DESC
  DERIVED_FROM_UID_ASC
  DERIVED_FROM_UID_DESC
  ENTITY_TYPE_ASC
  ENTITY_TYPE_DESC
  ENTITY_URIS_ASC
  ENTITY_URIS_DESC
  ID_ASC
  ID_DESC
  IS_DELETED_ASC
  IS_DELETED_DESC
  NATURAL
  PREV_REVISION_ID_ASC
  PREV_REVISION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPO_DID_ASC
  REPO_DID_DESC
  REVISION_CID_ASC
  REVISION_CID_DESC
  REVISION_URIS_ASC
  REVISION_URIS_DESC
  UID_ASC
  UID_DESC
}

type SourceRecord {
  body: String!
  containedEntityUris: [String]
  contentType: String!

  """Reads a single `DataSource` that is related to this `SourceRecord`."""
  dataSource: DataSource
  dataSourceUid: String
  meta: JSON
  sourceType: String!
  sourceUri: String!
  timestamp: Datetime!
  uid: String!
}

"""
A condition to be used against `SourceRecord` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SourceRecordCondition {
  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `containedEntityUris` field."""
  containedEntityUris: [String]

  """Checks for equality with the object’s `contentType` field."""
  contentType: String

  """Checks for equality with the object’s `dataSourceUid` field."""
  dataSourceUid: String

  """Checks for equality with the object’s `meta` field."""
  meta: JSON

  """Checks for equality with the object’s `sourceType` field."""
  sourceType: String

  """Checks for equality with the object’s `sourceUri` field."""
  sourceUri: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `SourceRecord` object types. All fields are combined with a logical ‘and.’
"""
input SourceRecordFilter {
  """Checks for all expressions in this list."""
  and: [SourceRecordFilter!]

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `containedEntityUris` field."""
  containedEntityUris: StringListFilter

  """Filter by the object’s `contentType` field."""
  contentType: StringFilter

  """Filter by the object’s `dataSource` relation."""
  dataSource: DataSourceFilter

  """A related `dataSource` exists."""
  dataSourceExists: Boolean

  """Filter by the object’s `dataSourceUid` field."""
  dataSourceUid: StringFilter

  """Filter by the object’s `meta` field."""
  meta: JSONFilter

  """Negates the expression."""
  not: SourceRecordFilter

  """Checks for any expressions in this list."""
  or: [SourceRecordFilter!]

  """Filter by the object’s `sourceType` field."""
  sourceType: StringFilter

  """Filter by the object’s `sourceUri` field."""
  sourceUri: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `SourceRecord` values."""
type SourceRecordsConnection {
  """
  A list of edges which contains the `SourceRecord` and cursor to aid in pagination.
  """
  edges: [SourceRecordsEdge!]!

  """A list of `SourceRecord` objects."""
  nodes: [SourceRecord!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SourceRecord` you could get from the connection."""
  totalCount: Int!
}

"""A `SourceRecord` edge in the connection."""
type SourceRecordsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SourceRecord` at the end of the edge."""
  node: SourceRecord!
}

"""Methods to use when ordering `SourceRecord`."""
enum SourceRecordsOrderBy {
  BODY_ASC
  BODY_DESC
  CONTAINED_ENTITY_URIS_ASC
  CONTAINED_ENTITY_URIS_DESC
  CONTENT_TYPE_ASC
  CONTENT_TYPE_DESC
  DATA_SOURCE_UID_ASC
  DATA_SOURCE_UID_DESC
  META_ASC
  META_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_TYPE_ASC
  SOURCE_TYPE_DESC
  SOURCE_URI_ASC
  SOURCE_URI_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  UID_ASC
  UID_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

type Subtitle {
  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SubtitleFilesByFileToSubtitleBAndAManyToManyConnection!
  languageCode: String!

  """Reads a single `MediaAsset` that is related to this `Subtitle`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!

  """Reads a single `Revision` that is related to this `Subtitle`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `Subtitle` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SubtitleCondition {
  """Checks for equality with the object’s `languageCode` field."""
  languageCode: String

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `File` values, with data from `_FileToSubtitle`.
"""
type SubtitleFilesByFileToSubtitleBAndAManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `_FileToSubtitle`, and the cursor to aid in pagination.
  """
  edges: [SubtitleFilesByFileToSubtitleBAndAManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `_FileToSubtitle`."""
type SubtitleFilesByFileToSubtitleBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_FileToSubtitle`."""
  _fileToSubtitlesByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _FileToSubtitleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _FileToSubtitleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_FileToSubtitle`."""
    orderBy: [_FileToSubtitlesOrderBy!] = [NATURAL]
  ): _FileToSubtitlesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `Subtitle` object types. All fields are combined with a logical ‘and.’
"""
input SubtitleFilter {
  """Checks for all expressions in this list."""
  and: [SubtitleFilter!]

  """Filter by the object’s `languageCode` field."""
  languageCode: StringFilter

  """Filter by the object’s `mediaAsset` relation."""
  mediaAsset: MediaAssetFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: SubtitleFilter

  """Checks for any expressions in this list."""
  or: [SubtitleFilter!]

  """Filter by the object’s `revision` relation."""
  revision: RevisionFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Subtitle` values."""
type SubtitlesConnection {
  """
  A list of edges which contains the `Subtitle` and cursor to aid in pagination.
  """
  edges: [SubtitlesEdge!]!

  """A list of `Subtitle` objects."""
  nodes: [Subtitle!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Subtitle` you could get from the connection."""
  totalCount: Int!
}

"""A `Subtitle` edge in the connection."""
type SubtitlesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Subtitle` at the end of the edge."""
  node: Subtitle!
}

"""Methods to use when ordering `Subtitle`."""
enum SubtitlesOrderBy {
  LANGUAGE_CODE_ASC
  LANGUAGE_CODE_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

type Transcript {
  engine: String!
  language: String!

  """Reads a single `MediaAsset` that is related to this `Transcript`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!
  text: String!
  uid: String!
}

"""
A condition to be used against `Transcript` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TranscriptCondition {
  """Checks for equality with the object’s `engine` field."""
  engine: String

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Transcript` object types. All fields are combined with a logical ‘and.’
"""
input TranscriptFilter {
  """Checks for all expressions in this list."""
  and: [TranscriptFilter!]

  """Filter by the object’s `engine` field."""
  engine: StringFilter

  """Filter by the object’s `language` field."""
  language: StringFilter

  """Filter by the object’s `mediaAsset` relation."""
  mediaAsset: MediaAssetFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: TranscriptFilter

  """Checks for any expressions in this list."""
  or: [TranscriptFilter!]

  """Filter by the object’s `text` field."""
  text: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Transcript` values."""
type TranscriptsConnection {
  """
  A list of edges which contains the `Transcript` and cursor to aid in pagination.
  """
  edges: [TranscriptsEdge!]!

  """A list of `Transcript` objects."""
  nodes: [Transcript!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transcript` you could get from the connection."""
  totalCount: Int!
}

"""A `Transcript` edge in the connection."""
type TranscriptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transcript` at the end of the edge."""
  node: Transcript!
}

"""Methods to use when ordering `Transcript`."""
enum TranscriptsOrderBy {
  ENGINE_ASC
  ENGINE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
  UID_ASC
  UID_DESC
}

type Translation {
  engine: String!
  language: String!

  """Reads a single `MediaAsset` that is related to this `Translation`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!
  text: String!
  uid: String!
}

"""
A condition to be used against `Translation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TranslationCondition {
  """Checks for equality with the object’s `engine` field."""
  engine: String

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Translation` object types. All fields are combined with a logical ‘and.’
"""
input TranslationFilter {
  """Checks for all expressions in this list."""
  and: [TranslationFilter!]

  """Filter by the object’s `engine` field."""
  engine: StringFilter

  """Filter by the object’s `language` field."""
  language: StringFilter

  """Filter by the object’s `mediaAsset` relation."""
  mediaAsset: MediaAssetFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: TranslationFilter

  """Checks for any expressions in this list."""
  or: [TranslationFilter!]

  """Filter by the object’s `text` field."""
  text: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Translation` values."""
type TranslationsConnection {
  """
  A list of edges which contains the `Translation` and cursor to aid in pagination.
  """
  edges: [TranslationsEdge!]!

  """A list of `Translation` objects."""
  nodes: [Translation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Translation` you could get from the connection."""
  totalCount: Int!
}

"""A `Translation` edge in the connection."""
type TranslationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Translation` at the end of the edge."""
  node: Translation!
}

"""Methods to use when ordering `Translation`."""
enum TranslationsOrderBy {
  ENGINE_ASC
  ENGINE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
  UID_ASC
  UID_DESC
}

type Ucan {
  audience: String!
  cid: String!
  resource: String!
  scope: String!
  token: String!
}

"""
A condition to be used against `Ucan` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UcanCondition {
  """Checks for equality with the object’s `audience` field."""
  audience: String

  """Checks for equality with the object’s `cid` field."""
  cid: String

  """Checks for equality with the object’s `resource` field."""
  resource: String

  """Checks for equality with the object’s `scope` field."""
  scope: String

  """Checks for equality with the object’s `token` field."""
  token: String
}

"""
A filter to be used against `Ucan` object types. All fields are combined with a logical ‘and.’
"""
input UcanFilter {
  """Checks for all expressions in this list."""
  and: [UcanFilter!]

  """Filter by the object’s `audience` field."""
  audience: StringFilter

  """Filter by the object’s `cid` field."""
  cid: StringFilter

  """Negates the expression."""
  not: UcanFilter

  """Checks for any expressions in this list."""
  or: [UcanFilter!]

  """Filter by the object’s `resource` field."""
  resource: StringFilter

  """Filter by the object’s `scope` field."""
  scope: StringFilter

  """Filter by the object’s `token` field."""
  token: StringFilter
}

"""A connection to a list of `Ucan` values."""
type UcansConnection {
  """
  A list of edges which contains the `Ucan` and cursor to aid in pagination.
  """
  edges: [UcansEdge!]!

  """A list of `Ucan` objects."""
  nodes: [Ucan!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Ucan` you could get from the connection."""
  totalCount: Int!
}

"""A `Ucan` edge in the connection."""
type UcansEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Ucan` at the end of the edge."""
  node: Ucan!
}

"""Methods to use when ordering `Ucan`."""
enum UcansOrderBy {
  AUDIENCE_ASC
  AUDIENCE_DESC
  CID_ASC
  CID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  SCOPE_ASC
  SCOPE_DESC
  TOKEN_ASC
  TOKEN_DESC
}

type User {
  """Reads a single `Agent` that is related to this `User`."""
  agentByDid: Agent
  did: String!
  name: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `did` field."""
  did: String

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `agentByDid` relation."""
  agentByDid: AgentFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `did` field."""
  did: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  DID_ASC
  DID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type _ConceptToContentItem {
  a: String!
  b: String!

  """
  Reads a single `Concept` that is related to this `_ConceptToContentItem`.
  """
  conceptByA: Concept

  """
  Reads a single `ContentItem` that is related to this `_ConceptToContentItem`.
  """
  contentItemByB: ContentItem
}

"""
A condition to be used against `_ConceptToContentItem` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input _ConceptToContentItemCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ConceptToContentItem` object types. All fields are combined with a logical ‘and.’
"""
input _ConceptToContentItemFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ConceptToContentItemFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `conceptByA` relation."""
  conceptByA: ConceptFilter

  """Filter by the object’s `contentItemByB` relation."""
  contentItemByB: ContentItemFilter

  """Negates the expression."""
  not: _ConceptToContentItemFilter

  """Checks for any expressions in this list."""
  or: [_ConceptToContentItemFilter!]
}

"""A connection to a list of `_ConceptToContentItem` values."""
type _ConceptToContentItemsConnection {
  """
  A list of edges which contains the `_ConceptToContentItem` and cursor to aid in pagination.
  """
  edges: [_ConceptToContentItemsEdge!]!

  """A list of `_ConceptToContentItem` objects."""
  nodes: [_ConceptToContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ConceptToContentItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ConceptToContentItem` edge in the connection."""
type _ConceptToContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ConceptToContentItem` at the end of the edge."""
  node: _ConceptToContentItem!
}

"""Methods to use when ordering `_ConceptToContentItem`."""
enum _ConceptToContentItemsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ConceptToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `Concept` that is related to this `_ConceptToMediaAsset`.
  """
  conceptByA: Concept

  """
  Reads a single `MediaAsset` that is related to this `_ConceptToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ConceptToMediaAsset` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input _ConceptToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ConceptToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ConceptToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ConceptToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `conceptByA` relation."""
  conceptByA: ConceptFilter

  """Filter by the object’s `mediaAssetByB` relation."""
  mediaAssetByB: MediaAssetFilter

  """Negates the expression."""
  not: _ConceptToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ConceptToMediaAssetFilter!]
}

"""A connection to a list of `_ConceptToMediaAsset` values."""
type _ConceptToMediaAssetsConnection {
  """
  A list of edges which contains the `_ConceptToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ConceptToMediaAssetsEdge!]!

  """A list of `_ConceptToMediaAsset` objects."""
  nodes: [_ConceptToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ConceptToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ConceptToMediaAsset` edge in the connection."""
type _ConceptToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ConceptToMediaAsset` at the end of the edge."""
  node: _ConceptToMediaAsset!
}

"""Methods to use when ordering `_ConceptToMediaAsset`."""
enum _ConceptToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentGroupingToContentItem {
  a: String!
  b: String!

  """
  Reads a single `ContentGrouping` that is related to this `_ContentGroupingToContentItem`.
  """
  contentGroupingByA: ContentGrouping

  """
  Reads a single `ContentItem` that is related to this `_ContentGroupingToContentItem`.
  """
  contentItemByB: ContentItem
}

"""
A condition to be used against `_ContentGroupingToContentItem` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentGroupingToContentItemCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentGroupingToContentItem` object types. All fields are combined with a logical ‘and.’
"""
input _ContentGroupingToContentItemFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentGroupingToContentItemFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `contentGroupingByA` relation."""
  contentGroupingByA: ContentGroupingFilter

  """Filter by the object’s `contentItemByB` relation."""
  contentItemByB: ContentItemFilter

  """Negates the expression."""
  not: _ContentGroupingToContentItemFilter

  """Checks for any expressions in this list."""
  or: [_ContentGroupingToContentItemFilter!]
}

"""A connection to a list of `_ContentGroupingToContentItem` values."""
type _ContentGroupingToContentItemsConnection {
  """
  A list of edges which contains the `_ContentGroupingToContentItem` and cursor to aid in pagination.
  """
  edges: [_ContentGroupingToContentItemsEdge!]!

  """A list of `_ContentGroupingToContentItem` objects."""
  nodes: [_ContentGroupingToContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentGroupingToContentItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentGroupingToContentItem` edge in the connection."""
type _ContentGroupingToContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentGroupingToContentItem` at the end of the edge."""
  node: _ContentGroupingToContentItem!
}

"""Methods to use when ordering `_ContentGroupingToContentItem`."""
enum _ContentGroupingToContentItemsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentItemToContribution {
  a: String!
  b: String!

  """
  Reads a single `ContentItem` that is related to this `_ContentItemToContribution`.
  """
  contentItemByA: ContentItem

  """
  Reads a single `Contribution` that is related to this `_ContentItemToContribution`.
  """
  contributionByB: Contribution
}

"""
A condition to be used against `_ContentItemToContribution` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentItemToContributionCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentItemToContribution` object types. All fields are combined with a logical ‘and.’
"""
input _ContentItemToContributionFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentItemToContributionFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `contentItemByA` relation."""
  contentItemByA: ContentItemFilter

  """Filter by the object’s `contributionByB` relation."""
  contributionByB: ContributionFilter

  """Negates the expression."""
  not: _ContentItemToContributionFilter

  """Checks for any expressions in this list."""
  or: [_ContentItemToContributionFilter!]
}

"""A connection to a list of `_ContentItemToContribution` values."""
type _ContentItemToContributionsConnection {
  """
  A list of edges which contains the `_ContentItemToContribution` and cursor to aid in pagination.
  """
  edges: [_ContentItemToContributionsEdge!]!

  """A list of `_ContentItemToContribution` objects."""
  nodes: [_ContentItemToContribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentItemToContribution` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentItemToContribution` edge in the connection."""
type _ContentItemToContributionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentItemToContribution` at the end of the edge."""
  node: _ContentItemToContribution!
}

"""Methods to use when ordering `_ContentItemToContribution`."""
enum _ContentItemToContributionsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentItemToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `ContentItem` that is related to this `_ContentItemToMediaAsset`.
  """
  contentItemByA: ContentItem

  """
  Reads a single `MediaAsset` that is related to this `_ContentItemToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ContentItemToMediaAsset` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentItemToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentItemToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ContentItemToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentItemToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `contentItemByA` relation."""
  contentItemByA: ContentItemFilter

  """Filter by the object’s `mediaAssetByB` relation."""
  mediaAssetByB: MediaAssetFilter

  """Negates the expression."""
  not: _ContentItemToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ContentItemToMediaAssetFilter!]
}

"""A connection to a list of `_ContentItemToMediaAsset` values."""
type _ContentItemToMediaAssetsConnection {
  """
  A list of edges which contains the `_ContentItemToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ContentItemToMediaAssetsEdge!]!

  """A list of `_ContentItemToMediaAsset` objects."""
  nodes: [_ContentItemToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentItemToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentItemToMediaAsset` edge in the connection."""
type _ContentItemToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentItemToMediaAsset` at the end of the edge."""
  node: _ContentItemToMediaAsset!
}

"""Methods to use when ordering `_ContentItemToMediaAsset`."""
enum _ContentItemToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContributionToContributor {
  a: String!
  b: String!

  """
  Reads a single `Contribution` that is related to this `_ContributionToContributor`.
  """
  contributionByA: Contribution

  """
  Reads a single `Contributor` that is related to this `_ContributionToContributor`.
  """
  contributorByB: Contributor
}

"""
A condition to be used against `_ContributionToContributor` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContributionToContributorCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContributionToContributor` object types. All fields are combined with a logical ‘and.’
"""
input _ContributionToContributorFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContributionToContributorFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `contributionByA` relation."""
  contributionByA: ContributionFilter

  """Filter by the object’s `contributorByB` relation."""
  contributorByB: ContributorFilter

  """Negates the expression."""
  not: _ContributionToContributorFilter

  """Checks for any expressions in this list."""
  or: [_ContributionToContributorFilter!]
}

"""A connection to a list of `_ContributionToContributor` values."""
type _ContributionToContributorsConnection {
  """
  A list of edges which contains the `_ContributionToContributor` and cursor to aid in pagination.
  """
  edges: [_ContributionToContributorsEdge!]!

  """A list of `_ContributionToContributor` objects."""
  nodes: [_ContributionToContributor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContributionToContributor` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContributionToContributor` edge in the connection."""
type _ContributionToContributorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContributionToContributor` at the end of the edge."""
  node: _ContributionToContributor!
}

"""Methods to use when ordering `_ContributionToContributor`."""
enum _ContributionToContributorsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContributionToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `Contribution` that is related to this `_ContributionToMediaAsset`.
  """
  contributionByA: Contribution

  """
  Reads a single `MediaAsset` that is related to this `_ContributionToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ContributionToMediaAsset` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContributionToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContributionToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ContributionToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContributionToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `contributionByA` relation."""
  contributionByA: ContributionFilter

  """Filter by the object’s `mediaAssetByB` relation."""
  mediaAssetByB: MediaAssetFilter

  """Negates the expression."""
  not: _ContributionToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ContributionToMediaAssetFilter!]
}

"""A connection to a list of `_ContributionToMediaAsset` values."""
type _ContributionToMediaAssetsConnection {
  """
  A list of edges which contains the `_ContributionToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ContributionToMediaAssetsEdge!]!

  """A list of `_ContributionToMediaAsset` objects."""
  nodes: [_ContributionToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContributionToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContributionToMediaAsset` edge in the connection."""
type _ContributionToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContributionToMediaAsset` at the end of the edge."""
  node: _ContributionToMediaAsset!
}

"""Methods to use when ordering `_ContributionToMediaAsset`."""
enum _ContributionToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _FileToMediaAsset {
  a: String!
  b: String!

  """Reads a single `File` that is related to this `_FileToMediaAsset`."""
  fileByA: File

  """
  Reads a single `MediaAsset` that is related to this `_FileToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_FileToMediaAsset` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _FileToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_FileToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _FileToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_FileToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `fileByA` relation."""
  fileByA: FileFilter

  """Filter by the object’s `mediaAssetByB` relation."""
  mediaAssetByB: MediaAssetFilter

  """Negates the expression."""
  not: _FileToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_FileToMediaAssetFilter!]
}

"""A connection to a list of `_FileToMediaAsset` values."""
type _FileToMediaAssetsConnection {
  """
  A list of edges which contains the `_FileToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_FileToMediaAssetsEdge!]!

  """A list of `_FileToMediaAsset` objects."""
  nodes: [_FileToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_FileToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_FileToMediaAsset` edge in the connection."""
type _FileToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_FileToMediaAsset` at the end of the edge."""
  node: _FileToMediaAsset!
}

"""Methods to use when ordering `_FileToMediaAsset`."""
enum _FileToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _FileToSubtitle {
  a: String!
  b: String!

  """Reads a single `File` that is related to this `_FileToSubtitle`."""
  fileByA: File

  """Reads a single `Subtitle` that is related to this `_FileToSubtitle`."""
  subtitleByB: Subtitle
}

"""
A condition to be used against `_FileToSubtitle` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _FileToSubtitleCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_FileToSubtitle` object types. All fields are combined with a logical ‘and.’
"""
input _FileToSubtitleFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_FileToSubtitleFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `fileByA` relation."""
  fileByA: FileFilter

  """Negates the expression."""
  not: _FileToSubtitleFilter

  """Checks for any expressions in this list."""
  or: [_FileToSubtitleFilter!]

  """Filter by the object’s `subtitleByB` relation."""
  subtitleByB: SubtitleFilter
}

"""A connection to a list of `_FileToSubtitle` values."""
type _FileToSubtitlesConnection {
  """
  A list of edges which contains the `_FileToSubtitle` and cursor to aid in pagination.
  """
  edges: [_FileToSubtitlesEdge!]!

  """A list of `_FileToSubtitle` objects."""
  nodes: [_FileToSubtitle!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_FileToSubtitle` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_FileToSubtitle` edge in the connection."""
type _FileToSubtitlesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_FileToSubtitle` at the end of the edge."""
  node: _FileToSubtitle!
}

"""Methods to use when ordering `_FileToSubtitle`."""
enum _FileToSubtitlesOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _RevisionToCommit {
  a: String!
  b: String!

  """Reads a single `Commit` that is related to this `_RevisionToCommit`."""
  commitByA: Commit

  """Reads a single `Revision` that is related to this `_RevisionToCommit`."""
  revisionByB: Revision
}

"""
A condition to be used against `_RevisionToCommit` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input _RevisionToCommitCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_RevisionToCommit` object types. All fields are combined with a logical ‘and.’
"""
input _RevisionToCommitFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_RevisionToCommitFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Filter by the object’s `commitByA` relation."""
  commitByA: CommitFilter

  """Negates the expression."""
  not: _RevisionToCommitFilter

  """Checks for any expressions in this list."""
  or: [_RevisionToCommitFilter!]

  """Filter by the object’s `revisionByB` relation."""
  revisionByB: RevisionFilter
}

"""A connection to a list of `_RevisionToCommit` values."""
type _RevisionToCommitsConnection {
  """
  A list of edges which contains the `_RevisionToCommit` and cursor to aid in pagination.
  """
  edges: [_RevisionToCommitsEdge!]!

  """A list of `_RevisionToCommit` objects."""
  nodes: [_RevisionToCommit!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_RevisionToCommit` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_RevisionToCommit` edge in the connection."""
type _RevisionToCommitsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_RevisionToCommit` at the end of the edge."""
  node: _RevisionToCommit!
}

"""Methods to use when ordering `_RevisionToCommit`."""
enum _RevisionToCommitsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}
